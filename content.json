{"meta":{"title":"pengpeng","subtitle":null,"description":"鹏鹏","author":"pengpeng","url":""},"pages":[{"title":"about","date":"2018-12-12T14:14:36.000Z","updated":"2019-11-15T17:29:48.000Z","comments":false,"path":"about/index.html","permalink":"/about/index.html","excerpt":"","text":"[さくら荘のhojun] 与&nbsp; Mashiro&nbsp; （ 真（ま）白（しろ） ） 对话中... bot_ui_ini()","keywords":"关于"},{"title":"client","date":"2018-12-20T15:13:35.000Z","updated":"2019-11-15T17:29:48.000Z","comments":false,"path":"client/index.html","permalink":"/client/index.html","excerpt":"","text":"直接下载 or 扫码下载：","keywords":"Android客户端"},{"title":"comment","date":"2018-12-20T15:13:48.000Z","updated":"2019-11-15T17:29:48.000Z","comments":true,"path":"comment/index.html","permalink":"/comment/index.html","excerpt":"","text":"念两句诗 叙别梦、扬州一觉。 【宋代】吴文英《夜游宫·人去西楼雁杳》","keywords":"留言板"},{"title":"donate","date":"2018-12-20T15:13:05.000Z","updated":"2019-11-15T17:29:48.000Z","comments":false,"path":"donate/index.html","permalink":"/donate/index.html","excerpt":"","text":"","keywords":"谢谢饲主了喵~"},{"title":"lab","date":"2019-01-05T13:47:59.000Z","updated":"2019-11-15T17:29:48.000Z","comments":false,"path":"lab/index.html","permalink":"/lab/index.html","excerpt":"","text":"sakura主题balabala","keywords":"Lab实验室"},{"title":"music","date":"2018-12-20T15:14:28.000Z","updated":"2019-11-15T17:29:48.000Z","comments":false,"path":"music/index.html","permalink":"/music/index.html","excerpt":"","text":"","keywords":"喜欢的音乐"},{"title":"links","date":"2018-12-19T15:11:06.000Z","updated":"2019-11-15T17:29:48.000Z","comments":true,"path":"links/index.html","permalink":"/links/index.html","excerpt":"","text":"","keywords":"友人帐"},{"title":"rss","date":"2018-12-20T15:09:03.000Z","updated":"2019-11-15T17:29:48.000Z","comments":true,"path":"rss/index.html","permalink":"/rss/index.html","excerpt":"","text":""},{"title":"theme-sakura","date":"2019-01-04T14:53:25.000Z","updated":"2019-11-15T17:29:48.000Z","comments":false,"path":"theme-sakura/index.html","permalink":"/theme-sakura/index.html","excerpt":"","text":"Hexo主题Sakura修改自WordPress主题Sakura，感谢原作者Mashiro","keywords":"Hexo 主题 Sakura 🌸"},{"title":"video","date":"2018-12-20T15:14:38.000Z","updated":"2019-11-15T17:29:48.000Z","comments":false,"path":"video/index.html","permalink":"/video/index.html","excerpt":"","text":"var videos = [ { img: 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '放送时间: 2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' }, { img : 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' } ] .should-ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:95%;}.should-ellipsis-full{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:100%;}.should-ellipsis i{position:absolute;right:24px;}.grey-text{color:#9e9e9e !important}.grey-text.text-darken-4{color:#212121 !important}html{line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}img{border-style:none}progress{display:inline-block;vertical-align:baseline}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}html{-webkit-box-sizing:border-box;box-sizing:border-box}*,*:before,*:after{-webkit-box-sizing:inherit;box-sizing:inherit}ul:not(.browser-default){padding-left:0;list-style-type:none}ul:not(.browser-default)>li{list-style-type:none}.card{-webkit-box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2);box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2)}.hoverable{-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s}.hoverable:hover{-webkit-box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19)}i{line-height:inherit}i.right{float:right;margin-left:15px}.bangumi .right{float:right !important}.material-icons{text-rendering:optimizeLegibility;-webkit-font-feature-settings:'liga';-moz-font-feature-settings:'liga';font-feature-settings:'liga'}.row{margin-left:auto;margin-right:auto;margin-bottom:20px}.row:after{content:\"\";display:table;clear:both}.row .col{float:left;-webkit-box-sizing:border-box;box-sizing:border-box;padding:0 .75rem;min-height:1px}.row .col.s12{width:100%;margin-left:auto;left:auto;right:auto}@media only screen and (min-width:601px){.row .col.m6{width:50%;margin-left:auto;left:auto;right:auto}}html{line-height:1.5;font-family:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif;font-weight:normal;color:rgba(0,0,0,0.87)}@media only screen and (min-width:0){html{font-size:14px}}@media only screen and (min-width:992px){html{font-size:14.5px}}@media only screen and (min-width:1200px){html{font-size:15px}}.card{position:relative;margin:.5rem 0 1rem 0;background-color:#fff;-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s;border-radius:2px}.card .card-title{font-size:24px;font-weight:300}.card .card-title.activator{cursor:pointer}.card .card-image{position:relative}.card .card-image img{display:block;border-radius:2px 2px 0 0;position:relative;left:0;right:0;top:0;bottom:0;width:100%}.card .card-content{padding:24px;border-radius:0 0 2px 2px}.card .card-content p{margin:0}.card .card-content .card-title{display:block;line-height:32px;margin-bottom:8px}.card .card-content .card-title i{line-height:32px}.card .card-reveal{padding:24px;position:absolute;background-color:#fff;width:100%;overflow-y:auto;left:0;top:100%;height:100%;z-index:3;display:none}.card .card-reveal .card-title{cursor:pointer;display:block}.waves-effect{position:relative;cursor:pointer;display:inline-block;overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent;vertical-align:middle;z-index:1;-webkit-transition:.3s ease-out;transition:.3s ease-out}.waves-effect img{position:relative;z-index:-1}.waves-block{display:block}::-webkit-input-placeholder{color:#d1d1d1}::-moz-placeholder{color:#d1d1d1}:-ms-input-placeholder{color:#d1d1d1}::-ms-input-placeholder{color:#d1d1d1}[type=\"radio\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"radio\"]:not(:checked)+span{position:relative;padding-left:35px;cursor:pointer;display:inline-block;height:25px;line-height:25px;font-size:1rem;-webkit-transition:.28s ease;transition:.28s ease;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border-radius:50%}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border:2px solid #5a5a5a}[type=\"radio\"]:not(:checked)+span:after{-webkit-transform:scale(0);transform:scale(0)}[type=\"checkbox\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"checkbox\"]:not(:checked):disabled+span:not(.lever):before{border:none;background-color:rgba(0,0,0,0.42)}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):before{width:0;height:0;border:3px solid transparent;left:6px;top:10px;-webkit-transform:rotateZ(37deg);transform:rotateZ(37deg);-webkit-transform-origin:100% 100%;transform-origin:100% 100%}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):after{height:20px;width:20px;background-color:transparent;border:2px solid #5a5a5a;top:0px;z-index:0}input[type=checkbox]:not(:disabled) ~ .lever:active:before,input[type=checkbox]:not(:disabled).tabbed:focus ~ .lever::before{-webkit-transform:scale(2.4);transform:scale(2.4);background-color:rgba(0,0,0,0.08)}input[type=range].focused:focus:not(.active)::-webkit-slider-thumb{-webkit-box-shadow:0 0 0 10px rgba(38,166,154,0.26);box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-moz-range-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-ms-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)} 番组计划 这里将是永远的回忆 window.onload = function(){ videos.forEach(function(video, i){ $('#rootRow').append(` ${video.title} ${video.jp} ${video.status} ${video.title} ${video.jp} 放送时间: ${video.time} ${video.desc} ${video.status} `) }) }","keywords":"B站"},{"title":"tags","date":"2018-12-12T14:14:16.000Z","updated":"2019-11-15T17:29:48.000Z","comments":true,"path":"tags/index.html","permalink":"/tags/index.html","excerpt":"","text":""},{"title":"bangumi","date":"2019-02-10T13:32:48.000Z","updated":"2019-11-15T17:29:48.000Z","comments":false,"path":"bangumi/index.html","permalink":"/bangumi/index.html","excerpt":"","text":"","keywords":null}],"posts":[{"title":"11.21技术分享","slug":"2019-11-21-21jishu","date":"2019-11-20T16:00:00.000Z","updated":"2019-11-21T07:17:59.874Z","comments":true,"path":"2019/11/21/2019-11-21-21jishu/","link":"","permalink":"/2019/11/21/2019-11-21-21jishu/","excerpt":"","text":"对谷歌插件的导入导出: 导出谷歌插件 在你的电脑中找到谷歌的安装的位置 正常情况下默认为C:\\Users\\Administrator\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Extensions 这个路径下存放的都是谷歌浏览器中安装的插件 将此目录下的插件文件复制即可 判断文件分别对应哪个插件 在插件这个目录下 文件名都是随机生成的, 所以我们没办法直接在这里区分哪个插件 我们可以点进每个文件夹 它的下级目录就是一个版本号 , 在谷歌的扩展程序中寻找与之相同的插件 那这个文件夹就是对应的插件了 如何导入谷歌插件 设置—&gt; 左侧栏扩展程序 —&gt; 右上角确定开启开发者模式 —&gt; 加载已解压的扩展程序 然后在文件中找到之前复制导出的那些文件夹,注意:要选中加载的文件夹 是乱码名下那个版本号名的文件夹! 这里再分享一个安装插件的小技巧 有时候我们在网上下载下来的是.crx文件,然而谷歌有时候会安装不上这种文件这时候可以将.crx文件后缀名改为.zip或者其他压缩文件后缀名,然后再解压,之后的导入插件步骤同上","categories":[{"name":"技术分享","slug":"技术分享","permalink":"/categories/技术分享/"}],"tags":[{"name":"谷歌插件","slug":"谷歌插件","permalink":"/tags/谷歌插件/"}],"keywords":[{"name":"技术分享","slug":"技术分享","permalink":"/categories/技术分享/"}]},{"title":"11.20心得","slug":"2019-11-20-20ribao","date":"2019-11-19T16:00:00.000Z","updated":"2019-11-21T02:40:45.916Z","comments":true,"path":"2019/11/20/2019-11-20-20ribao/","link":"","permalink":"/2019/11/20/2019-11-20-20ribao/","excerpt":"","text":"JavaWeb开发环境的配置:tomcat配置: 下载tomcat 解压到任意的英文目录 将tomcat引入到项目中 HTTP协议: C/S: 下载客户端 热更新, 人工智能 学习算法 B / S : 缺点:端口不安全 优点:只需要维护一端 http协议:超文本传输协议,是一个应用层的网络传输协议!特点: 简单,快速 无连接协议,每次连接服务器只处理一次客户端的请求,处理完毕,立即断开 无状态协议,处理请求,以及进行响应时,没有记忆能力! 支持多种不同的数据提交方式,GET/POST等等 数据传输很灵活,支持任意数据类型 HTTP协议的组成部分: 请求: 请求由四部分组成: 请求头: 请求头部的信息,由一个个的键值对组成,描述的是有关客户端的信息 请求体: GET请求没有请求体,当请求方式为POST时,存在请求体,请求体是用于存储数据的数据容器 请求空行: 请求头部与请求体之间的一行空白 请求行: 由一个个的键值对组成,描述的是:描述了请求的方式,远端服务器地址,以及所使用的协议版本等信息 响应: 响应由三部分组成: 响应头: 响应头部的信息,由一个个的键值对组成,描述的是有关服务器的信息 响应体: 服务器给客户端回复的主体内容 响应行: 描述了响应的协议版本,响应状态码,以及响应成功或失败的相关解释 开发环境下: 代码部署到服务器后,访问的路径:http://ip地址:端口号/项目名/文件名.后缀名 HttpServlet类:步骤: 编写一个类,继承自HttpServlet 重写父类的service(HttpSercletRequest request,HttpServletResponse response)方法 在service方法中 对用户进行响应","categories":[{"name":"Java","slug":"Java","permalink":"/categories/Java/"}],"tags":[{"name":"tomcat","slug":"tomcat","permalink":"/tags/tomcat/"}],"keywords":[{"name":"Java","slug":"Java","permalink":"/categories/Java/"}]},{"title":"11.20心得","slug":"2019-11-20-20xinde","date":"2019-11-19T16:00:00.000Z","updated":"2019-11-20T03:13:06.709Z","comments":true,"path":"2019/11/20/2019-11-20-20xinde/","link":"","permalink":"/2019/11/20/2019-11-20-20xinde/","excerpt":"","text":"对于博客模板的修改: 由于19号发现了之前自己的博客模板有一些没改好的地方,便下决心这次要彻底改好一个博客模板 所以19号的整整一天就都是在找模板,看效果的 然后晚自习的时候就已经确定好了这个模板,开始着手修改 由于不太了解博客里面元素和.ejs文件的构造 在改一些东西的时候总会有报错 后来想到了把所有文件打开 然后去查找那个关键字 由于有一些js基础,这么一查找到,想做些修改也不是很难 在将一些404图片修改了,把多余的文字修改了之后 后续又对博客进行了一些优化 首先将Valine评论区的 ID 和 Key 换成了自己注册的LeanCloud 的ID 和 Key 还将github博客也推到了coding 这个仓库可以让国内访问github可以快一些 并将自己之前购买的域名都绑定到了自己的博客上: zhengyupeng.top www.zhengyupeng.top 也都能访问到我的博客了! 最后总结一下心得吧: 昨天一天和今天上午到十点多相当于在学习Java的进度上没有进展,但是改完这个博客,也学到了很多的东西,了解到了很多东西,并且改完这个博客心情都变好了,可以安心学习去了。接下来传完的个博客我就继续学习Java了,冲冲冲!!!","categories":[{"name":"心得","slug":"心得","permalink":"/categories/心得/"}],"tags":[{"name":"博客","slug":"博客","permalink":"/tags/博客/"}],"keywords":[{"name":"心得","slug":"心得","permalink":"/categories/心得/"}]},{"title":"11.18JAVA学习进度","slug":"2019-11-18-18ribao","date":"2019-11-17T16:00:00.000Z","updated":"2019-11-20T03:13:09.576Z","comments":true,"path":"2019/11/18/2019-11-18-18ribao/","link":"","permalink":"/2019/11/18/2019-11-18-18ribao/","excerpt":"","text":"11.18Java学习进度解析xml属性操作,Xpath:// 1. 加载xml文件到jvm中,形成数据流 InputStream is TestXML_1.class.getClassLoader().getResourceAsStream(&quot;test4.xml&quot;); // 2. 创建解析对象 SAXReader sax = new SAXReader(); // 3. 获得文档对象(整个xml文件)[将数据流转换成一个文档对象] Document doc = sax.read(is); // 4. 获得根元素 Element root = doc.getRootElement(); // 5. 获得根元素下的所有子元素 List&lt;Element&gt; list = root.elements(); //System.out.println(list.size()); //list.forEach( s -&gt; System.out.println(s)); //for(Element e1: list){ // List&lt;Element&gt; list2 = e1.elements(); // for(Element e2 : list2){ // System.out.println(e2.getName()+&quot;:&quot;+e2.getData()); // } //} for(Element e1 : list){ Attribute type = e1.attribute(&quot;type&quot;); System.out.println(type.getValue()); } 添加元素: // 创建元素(节点) Element student = root.addElement(&quot;student&quot;); Element id = student.addElement(&quot;id&quot;); id.setText(&quot;3&quot;); Element name = student.addElement(&quot;name&quot;); name.setText(&quot;curry&quot;); Element age = student.addElement(&quot;age&quot;); age.setText(&quot;30&quot;); //写入xml文件中 FileOutputStream fos = new FileOutputStream(new File(&quot;D:/xx.xml&quot;)); OutputFormat format = new OutputFormat(&quot;\\t\\n&quot;,true,&quot;UTF-8&quot;); XMLWriter xw = new XMLWriter(out,format); //将整个文档对象写入文件中 xw.write(doc); System.out.println(&quot;写入成功!&quot;); xw.close(); Xpath:xml文件 path路径 : xpath是一门在xml文档中快速查找信息的方式 单纯的使用dom4j访问节点时,需要一层一层的处理,如果有了xpath,访问层级的节点就简单了 使用xpath需要引包: jaxen-1.1-beta-7.jar","categories":[{"name":"笔记","slug":"笔记","permalink":"/categories/笔记/"}],"tags":[{"name":"解析xml属性操作","slug":"解析xml属性操作","permalink":"/tags/解析xml属性操作/"},{"name":"Xpath","slug":"Xpath","permalink":"/tags/Xpath/"}],"keywords":[{"name":"笔记","slug":"笔记","permalink":"/categories/笔记/"}]},{"title":"11.16JAVA学习进度","slug":"2019-11-16-16ribao","date":"2019-11-15T16:00:00.000Z","updated":"2019-11-20T03:13:12.349Z","comments":true,"path":"2019/11/16/2019-11-16-16ribao/","link":"","permalink":"/2019/11/16/2019-11-16-16ribao/","excerpt":"","text":"11.16Java学习进度数据库优化,XML:数据库优化: 在进行表格查询时,where子句中的条件执行顺序是从左至右,清除数据量较大的条件应该放在左边.(特别注意:笛卡尔积消除条件必须放在左边)10000 --&gt;9999 ---&gt;9998 ---&gt;999 10000 ---&gt;999 ---&gt;998 在进行表格查询时,列名列表应避免号! 数据库在执行查询操作时,会先将号展开,转换为所有的列名,再进行查询. 再进行表格查询时,能使用where条件筛选的数据,应尽量避免使用having子句来筛选,因为where条件执行在having之前,再早起筛选掉大量数据,可以让程序执行的更顺畅. 在进行多表查询时,查询的表顺序是从左至右的,应把表中数据量最少的表放在查询的最右边. 进行多表查询时,应尽可能的给所有表添加别名,能明确的区分有冲突的列. 在使用事务时,应尽量多地commit,尽量早地commit.原因:事务在未提交是,数据库会耗费大量内存,来缓存未提交的SQL结果. 尽可能多的使用函数 来提高SQL执行的效率. SQL语句编写时,除字符串以外,应使用大写字母.因为SQL语句执行时,会先将小写字母转化为大写字母再执行. 应尽可能少的访问数据库(多次数据访问的结果可能相同,如果缓存起来,可以提高程序的执行效率) 在索引列上,尽可能避免使用not来判断,not关键字入股判断了索引列,会导致此次查询索引失效,转而使用全表扫描的方式查询. 在索引列上,不能使用算数运算符,算数运算也会导致索引列使用,使用全表扫描的方式进行查询. 在查询数据时,如果需要使用&gt;或&lt;的条件,应替换为&gt;=或&lt;=原因是&gt;和&lt;符号,查询时是按照&gt;=和&lt;=进行查询,然后再撤去=的结果. XML:X(extensible:可扩展的)M(markup标记/标签)L(language语言)可扩展标记语言 XML语言的作用: 普通文件太慢,所以采用xml文件保存软件中的数据. 网络上传递数据. 配置文件 .properties, .xml XML的特点: 平台无关性, 独立的语言 90%的语言都支持xml,不支持的10%语言发布的时候,xml还没出世. xml具有自我描述性(内容自定义)(1)html文件中,所有标签(元素)都是官方定义好的,我们直接引用(2)xml文件中,所有元素自定义 xml语法规则: xml文件中必须有根元素 xml标签(元素)必须有开闭 xml标签(元素)对大小写敏感 xml标签(元素)必须正确的嵌套 xml标签(元素)的属性必须加引号(单双引都可以) xml注释方式: &lt;!--xml注释--&gt; CDATA区:在xml中书写特殊符号时,报错,忽略其本意,编程普通字符串 &lt;![CDATA[xxxx]]&gt; &lt;xx&gt;&lt;![CDATA[ 10&lt;5 ]]&gt;&lt;/xx&gt; DTD文件:Document Type Definition(文档类型定义)DTD的目的: 帮助你编写合法的代码 (可以规范编写的代码)DTD和XML之间的关系:类(人类)和对象(我)的关系数据库表和行(一条记录)的关系 XSD文件:xsd是xml结构定义xsd是dtd的替代品,比dtd高端xsd的优点:xsd的代码基于xml,没有专门的语法,和xml一样的解析和处理xsd支持一系列的数据类型 解析XML: 解析xml共有四种方式: DOM解析 SAX解析 JDOM解析 DOM4J解析 前两种属于基础方法,是官方提供的与平台无关的解析方式;后两种属于扩展方法,他们是在基础的方法之上扩展出来的,只适用于java平台. DOM解析: dom解析的原理解析xml时候,把文档中的所有元素按照期出现的层次关系,在内存中构造出树形结构. dom的有点就是可以遍历和修改节点的内容 缺点是内存压力较大,解析较慢 SAX解析: 是一种xml解析的替代方法 相对比dom方式,sax是一种速度更快,更有效的方法 不能修改节点内容 JDOM解析: 仅适用具体的类,而不用接口,不灵活 DOM4J: JDOM的一种智能分支,合并了许多超出基本xml文档功能 著名的底层框架hibernate就是用dom4j来解析 dom4j性能最高,其次是SAX,dom和jdom表现不好(解析10M大小的xml文件,就内存溢出了。) DOM4J解析:需要引包: // 1. 加载xml文件到jvm中,形成数据流 InputStream is TestXML_1.class.getClassLoader().getResourceAsStream(&quot;test4.xml&quot;); // 2. 创建解析对象 SAXReader sax = new SAXReader(); // 3. 获得文档对象(整个xml文件)[将数据流转换成一个文档对象] Document doc = sax.read(is); // 4. 获得根元素 Element root = doc.getRootElement(); // 5. 获得根元素下的所有子元素 List&lt;Element&gt; list = root.elements(); //System.out.println(list.size()); //list.forEach( s -&gt; System.out.println(s)); for(Element e1: list){ List&lt;Element&gt; list2 = e1.elements(); for(Element e2 : list2){ System.out.println(e2.getName()+&quot;:&quot;+e2.getData()); } } 常见错误: 文件位置错误: xml文件要放在src下 类型引用错误","categories":[{"name":"数据库","slug":"数据库","permalink":"/categories/数据库/"}],"tags":[{"name":"数据库优化","slug":"数据库优化","permalink":"/tags/数据库优化/"},{"name":"XML","slug":"XML","permalink":"/tags/XML/"}],"keywords":[{"name":"数据库","slug":"数据库","permalink":"/categories/数据库/"}]},{"title":"11.16技术分享","slug":"2019-11-16-16jishu","date":"2019-11-15T16:00:00.000Z","updated":"2019-11-20T03:13:15.088Z","comments":true,"path":"2019/11/16/2019-11-16-16jishu/","link":"","permalink":"/2019/11/16/2019-11-16-16jishu/","excerpt":"","text":"11.16技术分享idea运行tomcat控制台乱码:1.首先设置idea的编码格式:File–&gt;Settings–&gt;File Encodings 将所有编码格式统一设置成UTF-8。 2.再设置tomcat的编码格式: 改变VM options为-Dfile.encoding=UTF-8: 完成上面的设置后还会有乱码,不要急 3.配置idea的文件设置:找到idea图标,右键,打开文件位置找到 idea.exe.vmoptions和idea64.exe.vmoptions文件 并打开文件 在文件后面添加一行：-Dfile.encoding=UTF-8 idae中的设置配置也要修改 help–&gt;Edit Custom VM Options… 打开此配置 也在最后一行添加:-Dfile.encoding=UTF-8 4.修改tomcat的运行编码格式:进入到tomcat的根目录的bin目录下 此时可以在文件地址栏输入cmd来启动dos窗口执行 catalina.bat run (或者也可以直接cmd 然后cd到bin目录下 执行此命令) 之后再用命令切换cmd的编码格式“chcp 65001”切换cmd为utf8，”chcp 936”切换cmd为gbk 这里我们使用chcp 65001来切换成utf8 执行之后可以再运行一下 catalina.bat run 看看命令是否都编程正常汉语,若都成正常汉语就是成功了! 然后重启idea即可. 最后提一句: 自己改tomcat的logging.properties为GBk会导致调试时get/post参数乱码 还是都改成UTF8稳妥。","categories":[{"name":"分享","slug":"分享","permalink":"/categories/分享/"}],"tags":[{"name":"idea控制台乱码","slug":"idea控制台乱码","permalink":"/tags/idea控制台乱码/"}],"keywords":[{"name":"分享","slug":"分享","permalink":"/categories/分享/"}]},{"title":"11.15JAVA学习进度","slug":"2019-11-15-15ribao","date":"2019-11-14T16:00:00.000Z","updated":"2019-11-20T03:13:17.697Z","comments":true,"path":"2019/11/15/2019-11-15-15ribao/","link":"","permalink":"/2019/11/15/2019-11-15-15ribao/","excerpt":"","text":"11.15Java学习进度JDBC事务,批处理,连接池:JDBC事务:在dos命令行操作oracle时,执行DML,需要结束事务(commit提交 或 rollback回退)在JDBC中,事务是自动提交的,每执行一条DML语句,事务就自动提交一次我们可以通过JDBC的事务API,开始事务的手动提交,将多条DML语句看作一个整体要么一起成功,要么一起失败. 事务特性:特性: 事务是恢复和并发控制的基本单位。事务应该具有4个属性：原子性、一致性、隔离性、持久性。这四个属性通常称为ACID特性。原子性（atomicity）。一个事务是一个不可分割的工作单位，事务中包括的诸操作要么都做，要么都不做。一致性（consistency）。事务必须是使数据库从一个一致性状态变到另一个一致性状态。一致性与原子性是密切相关的。隔离性（isolation）。一个事务的执行不能被其他事务干扰。即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰。持久性（durability）。持久性也称永久性（permanence），指一个事务一旦提交，它对数据库中数据的改变就应该是永久性的。接下来的其他操作或故障不应该对其有任何影响。 JDBC事务操作格式:注意: 开启事务的手动提交,是通过连接对象完成的. 某个数据连接对象的事务开启手动提交后,这个连接对象的事务需要手动控制,其他连接对象不受影响.操作方法: 开始事务的手动提交: conn.setAutoCommit(boolean flag); 参数含义: true表示自动提交 , false表示手动提交. 提交事务: conn.commit(); 回退事务到上次提交: rollback(); 预编译sql: PreparedStatement prepareStatement = conn.prepareStatement(&quot;sql语句&quot;); 注意: 方法名是prepareStatement,而返回类型是PreparedStatement execute、executeUpdate区别: 不同1： execute可以执行查询语句，然后通过getResultSet，把结果集取出来。 executeUpdate不能执行查询语句。 不同2: execute返回boolean类型，true表示执行的是查询语句，false表示执行的是insert,delete,update等等。 executeUpdate返回的是int，表示有多少条数据受到了影响。 批处理:将多条SQL语句放到一起批量处理,批处理将多次对于数据库的操作次数,减少到了一次,提高了大量SQL语句一起执行时的性能. 使用步骤: 批处理使用Statement类操作 步骤1. 将一条SQL语句加入到批处理中 ``` statement.addBatch(String sql); ``` 步骤2. 执行批处理中的所有语句 ``` Statement.executeBatch(); ``` properties文件与类:常用于java的配置文件,因为Properties文件 可以快速的与Properties类 进行转换.里面不能中文,会被转换为Unicode编码。 文件:注释: #开头表示注释行键值对: 键与值之间使用等号连接,多个键值对之间使用换行分割 如何将一个Properties文件,转换为java中的Map集合对象:步骤: 创建Properties对象 Properties ppt = new Properties(); 创建Properties文件的字节输入流 InputStream is = // 可以通过 new FileInputStream, 也可以通过ClassLoader等等 将流加载到Properties对象 ppt.load(is); 连接池:有连接池创建连接,维护连接我们需要使用连接是,从连接池中获取连接,如果池中存在空闲连接,则拿去使用.如果不存在空闲连接,且池未满,则再连接池中创建新的连接使用.如果不存在空闲连接,且池已满,则排队等待空闲连接. 使用步骤: 引入相关的jar文件 dbcp : 连接池的代码 poll : 连接池的依赖库 创建一个properties文件,描述连接池的配置,内容如下: 数据库连接地址url=jdbc:oracle:thin:@localhost:1521:xe 数据库驱动地址driverClassName=oracle.jdbc.OracleDriver 数据库账号username=system 数据库密码password=123456 扩展配置: 初始化连接池时,创建的连接数量:initialSize=5 最大允许存在的连接数量maxActive=200 空闲时允许保留的最大连接数量maxIdle=10 空闲时间允许保留的最小连接数量minIdle=5 排队等候的超时时间maxWait=20000 将properties文件,转化为Properties对象.Properties ppt = new Properties();ppt.load(文件输入流); 通过连接池工厂类(BasicDataSourceFactory),创建连接池对象(一次程序启动,创建一个连接池就够了.)DataSource ds =BasicDataSourceFactory.createDataSource(ppt); 通过连接池对象,获取池中的连接Connection conn = ds.getConnection(); 正常JDBC操作实例: public class Demo { public static void main(String[] args) throws Exception { // 3. properties文件转换为Properties对象 Properties ppt = new Properties(); // 4. 加载文件的输入项 InputStream is = Demo.class.getClassLoader().getResourceAsStream(&quot;dbcp.properties&quot;); ppt.load(is); // 5. 通过工厂类床创建连接池 DataSource ds = BasicDataSourceFactory.createDataSource(ppt); // 6. 通过连接池,获取其中的连接,并使用 Connection conn = ds.getConnection(); //正常的JDBC操作 PreparedStatement state = conn.prepareStatement(&quot;insert into STUDENTS values (STUDENTS_STUID_SEQ.nextval,&#39;小刚&#39;,25)&quot;); int count = state.executeUpdate(); System.out.println(count&gt;0?&quot;数据插入成功&quot;:&quot;数据插入失败&quot;); } }","categories":[{"name":"java","slug":"java","permalink":"/categories/java/"}],"tags":[{"name":"JDBC事务","slug":"JDBC事务","permalink":"/tags/JDBC事务/"},{"name":"SQL批处理","slug":"SQL批处理","permalink":"/tags/SQL批处理/"},{"name":"连接池","slug":"连接池","permalink":"/tags/连接池/"}],"keywords":[{"name":"java","slug":"java","permalink":"/categories/java/"}]},{"title":"11.14JAVA学习进度","slug":"2019-11-14-14ribao","date":"2019-11-13T16:00:00.000Z","updated":"2019-11-20T03:13:20.497Z","comments":true,"path":"2019/11/14/2019-11-14-14ribao/","link":"","permalink":"/2019/11/14/2019-11-14-14ribao/","excerpt":"","text":"11.14Java学习进度防止sql注入,创建序列,工具类思想,配置文件思想,DAO:防止sql注入:使用PreparedStatement 替换 Statement: 可以防止拼接的sql注入, 原理就是你输入的数据不拼接,直接作为真实数据。 采用预编译,会提前生成sql的执行计划,提高执行效率。 拼接sql 每次sql是不同的 这回给数据库服务器的sql造成冲击,无法实现批处理。 由于不拼接sql, 程序员出错的概率会降低, 提高编程质量和速度。 String newSql = &quot;select from students where stuid = ?&quot;; 可以更安全的防止sql注入 创建序列: create sequence students_stuid_seq; 一张表对应一个序列 String newSql = &quot;insert into students values( &quot;+&quot;students_stuid_seq.nextval,?,?)&quot;; 工具类的思想:将多个文件会重复使用的类封装到一起,使用时直接调用,减少代码的复用度。 src路径又叫源码路径,或者类路径 一个类要得到类的加载器方法:类名.class.getClassLoader(); 配置文件的思想:将工具类中的数据提取出来额外放置,易于用户改变而不触碰源码 DAO思想:Data Access Object 数据访问对象它是对数据访问过程封装的对象 编写DAO: 根据需求编写DAO 对应的接口 使用DBUtil 工具类 结合JDBC编程得五步 实现接口中对应的方法 Connection conn 连接对象 Statement state 执行环境 ResultSet result 结果集对象","categories":[{"name":"java","slug":"java","permalink":"/categories/java/"}],"tags":[{"name":"SQL注入","slug":"SQL注入","permalink":"/tags/SQL注入/"},{"name":"工具类思想","slug":"工具类思想","permalink":"/tags/工具类思想/"},{"name":"DAO","slug":"DAO","permalink":"/tags/DAO/"}],"keywords":[{"name":"java","slug":"java","permalink":"/categories/java/"}]},{"title":"11.13JAVA学习进度","slug":"2019-11-13-13ribao","date":"2019-11-12T16:00:00.000Z","updated":"2019-11-20T03:13:24.063Z","comments":true,"path":"2019/11/13/2019-11-13-13ribao/","link":"","permalink":"/2019/11/13/2019-11-13-13ribao/","excerpt":"","text":"11.13Java学习进度JDBC,oracle常用表结构操作,防止sql注入:JDBC访问数据库的步骤: 加载驱动 获取连接 Connection 定义sql 并获取sql的执行环境 Statement 执行sql 处理sql 返回值 select 返回ResultSet 遍历 dml 返回int 代表影响数据行数 释放资源 Connection Statement ResultSet oracle常用表结构操作:常用表结构操作 –添加表字段 alter table tablename add(columnName columnType); –删除字段的语法： alter table tablename drop(columnName); –修改字段名 alter table tableName rename column oldCName to newCName; –修改数据类型 alter table tableName modify(columnName 数据类型); –删除触发器 drop trigger triggerName; –删除序列 drop sequence sequenceName; –修改表名字 alter table old_table_name rename to new_table_name; –修改字段为非空 alter table tableName modify columnName not null enable novalidate; –修改表字段为空 alter table tableName modify columnName default null; 防止sql注入:使用PreparedStatement 替换 Statement: 可以防止拼接的sql注入, 原理就是你输入的数据不拼接,直接作为真实数据。 采用预编译,会提前生成sql的执行计划,提高执行效率。 拼接sql 每次sql是不同的 这回给数据库服务器的sql造成冲击,无法实现批处理。 由于不拼接sql, 程序员出错的概率会降低, 提高编程质量和速度。","categories":[{"name":"数据库","slug":"数据库","permalink":"/categories/数据库/"}],"tags":[{"name":"JDBC","slug":"JDBC","permalink":"/tags/JDBC/"},{"name":"oracle常用表结构操作","slug":"oracle常用表结构操作","permalink":"/tags/oracle常用表结构操作/"}],"keywords":[{"name":"数据库","slug":"数据库","permalink":"/categories/数据库/"}]},{"title":"11.12技术分享","slug":"2019-11-12-12jishu","date":"2019-11-11T16:00:00.000Z","updated":"2019-11-20T03:13:27.427Z","comments":true,"path":"2019/11/12/2019-11-12-12jishu/","link":"","permalink":"/2019/11/12/2019-11-12-12jishu/","excerpt":"","text":"批处理:强制删除批处理文件编辑:DEL /F /A /Q \\\\?\\%1 RD /S /Q \\\\?\\%1 将上边代码另存为.bat文件将需要删除的文件拖到文件上就可以实现强制删除.%1可以替换为特定路径,此时双击即可实现对特定路径的删除.这个批处理常用于普通手段无法删除的文件 另外在实际使用中可以在这两条指令后加&gt;nul，运行时将不显示命令。 代码参数： del 删除命令. /F 强制删除只读文件. /S 从所有子目录删除指定文件. /Q 安静模式。删除全局通配符时，不要求确认. %systemdrive% 系统文件夹，如C:\\windows，有的朋友将系统装在D中，则表示D:\\WINDOWS %1默认为使用此批处理时输入的第一个值 *.(特定文件后缀名) 指文件的通配符 如.tmp,.log 全句意思是：强制删除系统文件夹下所有的格式为tmp的文件(哪怕文件是只读的)，并且在删除时不用向用户询问是否继续或终止! RD [/S] [/Q] [驱动器:]路径 /S 除目录本身外，还将删除指定目录下的所有子目录和文件。用于删除目录树。 /Q 安静模式，加 /S 时，删除目录树结构不再要求确认 DEL /F /A /Q \\?\\%1意思是以静默模式强制删除所有根目录及只读文件；RD /S /Q \\?\\%1意思是以静默模式强制删除所有子目录及文件。 \\?\\看作一种统一路径。?代表任何电脑，首先肯定搜索本地计算机，\\.\\把?换成.的话就表示本机了。 批处理每次能处理的变量从%0—%9共10个，其中%0默认给批处理文件名使用，%1默认为使用此批处理时输入的的第一个值. 同理：%2—%9指输入的第2-9个值。","categories":[{"name":"分享","slug":"分享","permalink":"/categories/分享/"}],"tags":[{"name":"强制删除","slug":"强制删除","permalink":"/tags/强制删除/"}],"keywords":[{"name":"分享","slug":"分享","permalink":"/categories/分享/"}]},{"title":"10.26JAVA学习进度","slug":"2019-10-26-26ribao","date":"2019-10-25T16:00:00.000Z","updated":"2019-11-20T03:12:54.683Z","comments":true,"path":"2019/10/26/2019-10-26-26ribao/","link":"","permalink":"/2019/10/26/2019-10-26-26ribao/","excerpt":"","text":"10.26Java学习进度泛型机制,Queue集合,Set集合,Map集合:泛型机制基本概念:通常情况下集合中可以存放不同类型的对象，本质上是将这些对象全部看做Object类型放入的，因此从集合中取出元素时也是Object类型，为了表达元素最真实的数据类型就需要强制类型转换，而强制类型转换可能发生类型转换异常。为了避免上述错误的发生，从jdk1.5开始提出泛型机制，也就是在集合名称的右侧使用&lt;数据类型&gt;的方式明确要求该集合可以存放的元素类型，若放入其它类型则编译报错 如： List lt1 = new LinkedList(); - 可以放入任意类型对象，取出麻烦 List&lt;String&gt; lt1 = new LinkedList&lt;String&gt;(); - 只能放入String类型，取出方便 原理分析:泛型的本质就是参数化类型，也就是让数据类型作为参数传递，集合定义中的E相当于形式参数负责占位，而使用集合时&lt;&gt;中的数据类型相当于实际参数负责给形式参数初始化，当初始化完毕后所有E被替换为实际参数表示的类型进行使用。由于E支持的数据类型非常广泛，因此得名为”泛型”.如: // 其中i叫做形式参数，负责占位 // 其中E叫做形式参数，负责占位 // int i = 5; E = String; // int i = 10; E = Student; public void show(int i) { public interface List&lt;E&gt; { ... } } // 其中5叫做实际参数，用于给形式参数初始化 其中String叫做实际参数 show(5); List&lt;String&gt; lt1 = ...; show(10); List&lt;Student&gt; lt2 = ...; Queue集合:基本概念: java.util.Queue集合是Collection集合的子集合，与List集合是平级关系。该集合的主要实现类是：LinkedList类，因为该类在增删方面有一定的优势。该集合用于描述具有先进先出特征的数据结构，叫做队列。 Queue接口中主要方法如下: Queue接口的常用方法 功能描述 boolean offer(E e) 将一个对象添加至对位,若成功则返回true E poll() 从队首删除并返回一个元素 E peek() 返回队首的元素(但并不删除) Set集合:基本概念:java.util.Set集合是Collection集合的子集合，与List集合以及Queue集合平级关系该集合与List集合的主要区别在于：元素没有先后次序并且不允许重复的元素。该集合的主要实现类有：HashSet类 和 TreeSet类。其中HashSet类的底层采用哈希表进行数据管理的。其中TreeSet类的底层采用二叉树进行数据管理的。 HashSet集合放入元素的过程:1.先调用元素的hashCode()方法得到哈希码,通过算法计算在哈希表中的位置。2.如果该位置没有元素，直接放入即可。3.如果该位置有元素，调用元素的equals()方法比较是不是相等。4.如果相等，则保留旧元素丢弃新元素。5.如果不相等，则放入该位置的链表中下一个元素 使用迭代器来访问集合中所有元素: Iterator&lt;String&gt; it = s1.iterator(); while(it.hasNext()) { System.out.println(&quot;获取到的元素是：&quot; + it.next()); } 使用StringBuilder类和迭代器实现toString方法的效果: // 构造StringBuilder类型的对象用于拼接 StringBuilder sb1 = new StringBuilder(); // 使用迭代器取出集合中的每个元素并拼接到StringBuilder对象中 sb1.append(&quot;集合中的元素有：[&quot;); // 重新获取迭代器，或者叫重置迭代器[one, two, three] it = s1.iterator(); while(it.hasNext()) { //sb1.append(it.next()).append(&quot;,&quot;).append(&quot; &quot;); String ts = it.next(); // 当条件成立时证明该元素不是最后一个元素 if(it.hasNext()) { sb1.append(ts).append(&quot;,&quot;).append(&quot; &quot;); } else { sb1.append(ts).append(&quot;]&quot;); } } // 最后多余的逗号和空格删除 //sb1.delete(sb1.length()-2,sb1.length()).append(&quot;]&quot;); // 打印最终的拼接结果 System.out.println(sb1); //[one, two, three] 注意:当使用迭代器迭代集合中的所有元素时，若使用集合中的remove方法来删除元素，则会出现ConcurrentModificationException并发修改异常，以后的开发中应该使用迭代器的remove方法来删除元素。 增强版的for循环(for each结构): (1)语法格式 for(元素类型 变量名 : 数组名/集合名) { 循环体; } (2)执行流程 不断地从数组或集合中取出一个元素并赋值给变量并执行循环体，直到处理完毕所有元素为止。 总结:遍历Set集合的方式有三种：toString()、for each结构、迭代器方式遍历List集合的方式有四种：除了上述3种方式外，还有get方法。 Map集合基本概念: java.util.Map&lt;K,V&gt;集合中操作元素的基本单位是：单对元素，其中类型参数如下： K - 此映射所维护的键(key)的类型 V - 映射值(value)的类型该集合中不允许出现重复的键，每个键最多只能映射到一个值。该集合的主要实现类有：HashMap类 和 TreeMap类。其中HashMap类的底层是采用哈希表进行数据管理的。其中TreeMap类的底层是采用二叉树进行数据管理的。 Map集合的遍历方式:迭代方式一: 迭代Key map = ...//初始化map Set&lt;Character&gt; keySet = map.keySet(); for(Iterator&lt;Character&gt;i= keySet.iterator();i.hasNext();){ Character key = i.next(); Integer value = map.get(key); System.out.println(key+&quot;:&quot;+value); } 迭代方式二: 迭代Entry map = ...//初始化map Set&lt;Entry&lt;Character,Integer&gt;&gt; entries=map.entrySet(); for(Entry&lt;Character,Integer&gt; e:entries){ Character kry = e.getKey(); Integer value = e.getValue(); System.out.println(key+&quot;:&quot;+value); }","categories":[{"name":"java","slug":"java","permalink":"/categories/java/"}],"tags":[{"name":"泛型机制","slug":"泛型机制","permalink":"/tags/泛型机制/"},{"name":"Queue集合","slug":"Queue集合","permalink":"/tags/Queue集合/"},{"name":"Set集合","slug":"Set集合","permalink":"/tags/Set集合/"},{"name":"Map集合","slug":"Map集合","permalink":"/tags/Map集合/"}],"keywords":[{"name":"java","slug":"java","permalink":"/categories/java/"}]},{"title":"10.25JAVA学习进度","slug":"2019-10-25-25ribao","date":"2019-10-24T16:00:00.000Z","updated":"2019-11-20T03:12:20.372Z","comments":true,"path":"2019/10/25/2019-10-25-25ribao/","link":"","permalink":"/2019/10/25/2019-10-25-25ribao/","excerpt":"","text":"10.25Java学习进度String类的常用方法,StringBuilder类和StringBuffer类,日期相关的类,Collection集合,List集合:String类的基本方法:检测字符串是否为”回文”: String str = &quot;上海自来水来自上海&quot;; for(int i = 0; i&lt;str.length()/2; i++){ if(str.charAt(i)!= str.charAt(str.length()-1-i)){ System.out.println(&quot;不是回文&quot;); return; } } System.out.println(&quot;是回文&quot;); StringBuilder类和StringBuffer类: 由于String类型描述的字符串内容是个常量不可更改，当程序中出现大量类似的字符串时需要单独存放从而浪费内存空间，若希望使用一块内存空间进行存储并且可以修改字符串内容，则应该使用StringBuilder类和StringBuffer类。 其中StringBuffer类，支持线程安全，访问的效率比较低 其中StringBuilder类，不支持线程安全，访问的效率比较高 StringBuilder类的常用方法: StringBuilder类的常用方法 功能描述 StringBuilder append(String str) 追加字符串 StringBuilder insert(int offset,String str) 插入字符串 StringBuilder delete(int start, int end) 删除字符串 StringBuilder replace(int start, int end, String str) 替换字符串 StringBuilder reverse() 字符串反转 日期相关的类: Date类基本概念: java.util.Date类用于描述特定的瞬间，可以精确到毫秒。 SimpleDateFormat类基本概念: java.text.SimpleDateFormat类主要用于实现日期和文本之间的相关转换。 Calendar类基本概念:java.util.Calendar类用于取代Date类来描述年月日时分秒的特定瞬间。 Collection集合:集合框架: 集合的由来:当需要在程序中记录单个数据内容时，则声明一个变量即可；当需要在程序中记录多个类型相同的数据内容时，则声明一个一维数组即可；当需要在程序中记录多个类型不同的数据内容时，则构造一个对象即可；当需要在程序中记录多个类型相同的对象时，则声明一个对象数组即可；当需要在程序中记录多个类型不同的对象时，则声明一个集合即可； 集合框架结构:在Java语言中集合框架的顶层是：java.util.Collection集合 和 java.util.Map集合其中Collection集合中操作元素的基本单位是：单个元素。其中Map集合中操作元素的基本单位是：单对元素。在以后的开发中很少直接使用Collection集合，而是使用该集合的子集合：List集合、Queue集合、Set集合等。 Collection集合基本概念:java.util.Collection集合是集合框架的根接口，其它接口是该接口的子接口。 Collection集合的常用方法: Collection集合的常用方法 功能描述 boolean add(E e) 向集合中添加对象 boolean contains(Object o) 判断是否包含指定对象 boolean remove(Object o) 从集合中删除对象 void clear() 清空集合 int size() 返回包含对象的个数 boolean isEmpty() 判断是否为空 List集合:基本概念:java.util.List集合是Collection集合的子集合，该集合中元素有先后次序且允许重复该集合的主要实现类有：ArrayList类、 LinkedList类、Stack类、Vector类等。 其中ArrayList类的底层是采用动态数组进行数据管理，访问方便，增删不方便。 其中LinkedList类的底层是采用链表进行数据管理，增删方便，访问不方便。 其中Stack类主要用于描述具有后进先出特征的数据结构，叫做栈，last in first out该类的底层是采用数组进行数据的管理。 其中Vector类的底层采用数组进行数据的管理，与ArrayList类相比属于线程安全的类，因此效率比较低，在以后的开发中推荐使用ArrayList类取代之。 常用的方法:List集合的常用方法 | 功能描述 :-: | :-:void add(int index,E element) | 向集合中指定位置添加元素 boolean addAll(int index,Coolection&lt;?extends E&gt; c) | 向集合中添加所有元素 E get(int index) | 从集合中获取指定位置元素 E set(int index,E element) | 修改指定位置的元素 E remove(int index) | 删除指定位置的元素","categories":[{"name":"java","slug":"java","permalink":"/categories/java/"}],"tags":[{"name":"String类","slug":"String类","permalink":"/tags/String类/"},{"name":"Collection集合","slug":"Collection集合","permalink":"/tags/Collection集合/"},{"name":"List集合","slug":"List集合","permalink":"/tags/List集合/"}],"keywords":[{"name":"java","slug":"java","permalink":"/categories/java/"}]},{"title":"10.24JAVA学习进度","slug":"2019-10-24-24ribao","date":"2019-10-23T16:00:00.000Z","updated":"2019-11-20T03:12:26.899Z","comments":true,"path":"2019/10/24/2019-10-24-24ribao/","link":"","permalink":"/2019/10/24/2019-10-24-24ribao/","excerpt":"","text":"10.24Java学习进度Object类,包装类和数学处理类,String类:Object类:常用的包java.lang包 - 该包是Java语言中的核心包，该包中的内容由Java虚拟机自动导入如： String类、System类等java.util包 - 该包是Java语言中的工具包，里面包含了大量的工具类和集合类等如：Scanner类、Random类等java.io包 - 该包是Java语言中的输入输出包，里面包含了大量读写文件的类等如：FileOutputStream类、FileInputStream类等java.net包 - 该包是Java语言中的网络包，里面包含了大量网络编程的类等如：ServerSocket类、Socket类等 Object类基本概念:java.lang.Object类是所有类层次结构的根类，任何类都是该类的直接或间接子类。 Object常用的方法:Object() - 使用无参方式构造对象。boolean equals(Object obj) - 用于判断调用对象是否与参数对象相等。 该方法默认比较两个对象的地址，与 == 运算符结果相同。 为了使得该方法比较两个对象的内容，则需要重写该方法。 若该方法重写后，则应该重写hashCode方法来维护 hashCode方法的常规协定 int hashCode() - 用于获取调用对象的哈希码值(内存地址的编号)。 若调用equals方法的结果相等，则各自调用hashCode方法的结果相同。 若调用equals方法的结果不相等，则各自调用hashCode方法的结果不相同。 为了维护上述的常规协定与equals方法结果保持一致，就需要重写该方法 String toString() - 用于获取对象的字符串形式。 该方法默认返回的字符串为：包名.类名@哈希码值的十六进制形式 为了返回更有意义的数据内容则需要重写该方法 当字符串内容与引用进行连接时，自动调用toString方法 当使用print或println方法打印引用时，会自动调用toString方法 包装类和数学处理类:如: Person p = new Person(); - 声明Person类型的引用指向Person类型的对象 int num = 10; - 声明一个int类型的变量num初始值为10 public class MyInteger { private int num = 10; } MyInteger it = new MyInteger(); 包装类的概念:由于Java语言是一门纯面向对象编程语言，而8种基本数据类型声明的变量并不是对象，为了满足Java语言的特性就需要对这些变量进行对象化处理，而实现该功能的相关类就叫做包装类。 包装类的分类:int =&gt; java.lang.Integer类char =&gt; java.lang.Character类其它类型对应的包装类就是将首字母变成大写 Integer类基本概念:(1)基本概念 java.lang.Integer类是int类型的包装类，里面包含了一个int类型的成员变量。 该类由final关键字修饰表示不能被继承。 (2)常用的方法 Integer(int value) - 根据参数指定的整数构造对象 Integer(String s) - 根据参数指定的字符串构造对象 该类重写了equals()、hashCode()、toString()方法 int intValue() - 用于获取调用对象中的整数数据并返回。 static Integer valueOf(int i) - 根据参数指定的整数返回对应的Integer对象。 static int parseInt(String s) - 用于将String类型转换为int类型并返回。 BigDecimal类:BigDecimal类基本概念:由于float类型和double类型的运算可能会有误差，为了实现精确运算则需要借助java.math.BigDecimal类型加以描述。 BigDecimal类常用方法:BigDecimal(String val) - 根据参数指定的字符串构造对象。BigDecimal add(BigDecimal augend) - 用于计算调用对象和参数对象的和并返回BigDecimal subtract(BigDecimal subtrahend) - 用于计算调用对象和参数对象的差并返回。BigDecimal multiply(BigDecimal multiplicand) - 用于计算调用对象和参数对象的积并返回。BigDecimal divide(BigDecimal divisor) - 用于计算调用对象和参数对象的商并返回。 String类:String类基本概念: java.lang.String类用于描述字符串，Java应用程序中所有字符串字面值都可以作为String类型的对象加以描述，如：”abc”等。 该类描述的字符串内容是个常量，一旦创建完毕后则不能更改，因此可以被共享。 常量池:由于String类型描述的字符串内容是个常量不可改变，因此Java虚拟机提供了一个常量池，当Java程序中出现字符串内容时就放入常量池中，若后续出现重复的字符串内容则直接使用池中已有的对象而不需再次创建，从而提高了性能。","categories":[{"name":"java","slug":"java","permalink":"/categories/java/"}],"tags":[{"name":"Object类,","slug":"Object类","permalink":"/tags/Object类/"},{"name":"包装类和数学处理类,","slug":"包装类和数学处理类","permalink":"/tags/包装类和数学处理类/"},{"name":"String类","slug":"String类","permalink":"/tags/String类/"}],"keywords":[{"name":"java","slug":"java","permalink":"/categories/java/"}]},{"title":"10.23JAVA学习进度","slug":"2019-10-23-23ribao","date":"2019-10-22T16:00:00.000Z","updated":"2019-11-20T03:12:29.045Z","comments":true,"path":"2019/10/23/2019-10-23-23ribao/","link":"","permalink":"/2019/10/23/2019-10-23-23ribao/","excerpt":"","text":"10.23Java学习进度访问控制,final关键字,多态,抽象类,接口,匿名内部类:访问控制:常用的访问控制符 访问控制符 访问权限 本类 本包中的类 子类 其它包中的其它类 public 公有的 ok ok ok ok protected 保护的 ok ok ok no 啥也不写 默认的 ok ok no no private 私有的 ok no no no a.public修饰的内容可以在任意位置使用；b.private修饰的内容只能在本类中使用；c.通常情况下，成员变量都使用private修饰，成员方法都使用public修饰； final关键字:基本概念:final本意为”最终的，不可更改的”，该关键字可以修饰类、成员方法、成员变量等。使用方式:final关键字修饰类表示该类不能被继承。 为了防止滥用继承带来的危害 如：java.lang.String类等 final关键字修饰成员方法表示该方法不能被重写但可以被继承。 为了防止不经意间造成的方法重写 如：java.text.DateFormat类中的format方法等 final关键字修饰成员变量表示该成员变量必须初始化而且不能更改。 为了防止不经意间造成数值的更改。 如：java.lang.Thread类中的MAX_PRIORITY等 扩展:在以后的开发中很少单独使用static关键字或final关键字修饰成员变量，通常都是使用public static final共同修饰成员变量来表达常量的含义。 常量的命名规则是：要求所有字母大写，不同单词之间采用下划线连接，如： public static final double PI = 3.14; 多态:基本概念:多态主要指同一种事物表现出来的多种形态。语法格式:父类类型 引用变量名 = new 子类类型();如： Person pw = new Worker(); pw.show(); 解析： 编译阶段调用Person类中show方法，在运行阶段调用Worker类中重写以后的show方法 多态的效果 (1)当父类的引用指向子类的对象时，父类的引用可以直接调用父类独有的方法；(2)当父类的引用指向子类的对象时，父类的引用不可以直接调用子类独有的方法；(3)对于父子类都有的非静态成员方法来说，编译阶段调用父类版本，运行阶段调用子类重写以后的版本；(4)对于父子类都有的静态方法来说，编译和运行阶段调用父类版本，隶属于类层级，因此与指向的对象无关； 引用数据类型之间的转换: (1)引用数据类型之间的转换分为：自动类型转换和强制类型转换。 其中自动类型转换主要指从小范围到大范围之间的转换，也就是子类到父类的转换其中强制类型转换主要指从大范围到小范围之间的转换，也就是父类到子类的转换 (2)引用数据类型之间的转换必须发生在父子类之间，否则编译报错。(3)若转换到的目标类型是子类类型但不是该引用真正指向的子类类型，则编译通过，运行阶段发生类型转换异常。(4)为了避免上述错误的发生，可以使用instanceof进行判断，具体格式如下：if(引用变量名 instanceof 数据类型) - 判断引用变量指向的对象是否为后面类型 多态的意义: 多态的实际意义在于可以屏蔽不同子类的差异性实现通用的编程，但可以调用不同的方法带来不同的结果。 抽象类的概念:抽象方法的概念抽象方法就是指不能具体实现的方法，也就是没有方法体并使用abstract关键字修饰 语法格式：访问控制符 abstract 返回值类型 方法名称(形参列表);如： public abstract void cry(); 注意事项: (1)抽象类中可以有成员变量、构造方法以及成员方法；(2)抽象类中可以有抽象方法也可以没有抽象方法；(3)拥有抽象方法的类必须是抽象类，因此严格来说，具有抽象方法并且使用abstract关键字修饰的类才算真正意义上的抽象类。 实际意义:抽象类的意义不在于自身创建对象而在于被继承，当一个类继承抽象类后必须重写抽象类中的抽象方法，否则该类也变成抽象类。也就是说抽象类对子类具有强制性和规范性，因此叫做模板设计模式。 经验：在以后的开发中推荐使用多态的语法格式，当父类的引用指向子类的对象时，那么父类引用直接调用的所有方法一定是父类拥有的方法，若希望更换子类时，只需要将new关键字后面的类型修改而其它地方无需更改立即生效，从而提高了代码的可维护性。该方式的缺点就是：父类引用不能直接访问子类独有的方法，若访问则需要强转。 接口基本概念:接口就是一种比抽象类还抽象的类，体现为所有成员方法都是抽象方法。定义类的关键字是class，而定义接口的关键字是interface。继承类的关键字是extends，而实现接口的关键字是implements。类和接口之间的关系:类和类之间的关系: 使用extends关键字表达继承的关系 支持单继承类和接口之间的关系: 使用implemets关键字表达实现的关系 支持多实现接口和接口之间的关系: 使用extends关键字表达继承的关系 支持多继承 抽象类和接口之间的区别(笔试题):(1)定义抽象类的关键字是abstract class，而定义接口的关键字是interface。(2)继承抽象类的关键字是extends，而实现接口的关键字是implements。(3)继承抽象类支持单继承，而实现接口可以多实现。(4)抽象类中可以有构造方法，而接口中不可以有构造方法。(5)抽象类中可以有成员变量，而接口中只可以有常量。(6)抽象类中可以有成员方法，而接口中只可以有抽象方法。(7)抽象类中增加方法可以不影响子类，而接口中增加方法通常都影响子类。(8)从jdk1.8开始允许接口中出现非抽象方法，但需要使用default关键字修饰。 匿名内部类:语法格式: 接口/父类类型 引用变量名 = new 接口/父类类型(){ 方法的重写 }; 经验的分享:当接口类型的引用作为方法的形参时，实参的传递方式有两种：a.自定义类实现接口，然后创建该类的对象作为实参传递；b.使用匿名内部类的语法格式来得到接口类型的引用作为实参传递；","categories":[{"name":"java","slug":"java","permalink":"/categories/java/"}],"tags":[{"name":"访问控制","slug":"访问控制","permalink":"/tags/访问控制/"},{"name":"关键字","slug":"关键字","permalink":"/tags/关键字/"},{"name":"接口","slug":"接口","permalink":"/tags/接口/"},{"name":"多态","slug":"多态","permalink":"/tags/多态/"}],"keywords":[{"name":"java","slug":"java","permalink":"/categories/java/"}]},{"title":"10.22JAVA学习进度","slug":"2019-10-22-22ribao","date":"2019-10-21T16:00:00.000Z","updated":"2019-11-20T03:12:24.086Z","comments":true,"path":"2019/10/22/2019-10-22-22ribao/","link":"","permalink":"/2019/10/22/2019-10-22-22ribao/","excerpt":"","text":"10.22Java学习进度封装,static关键字,单例设计模式,继承与方法的重写:封装基本概念:为了避免对成员变量的赋值合法但是不合理,与现实生活不符,为了避免这种现象采用封装.封装可以保证成员变量的合理性. 封装的实现流程:(1)私有化成员变量，使用private关键字修饰；(2)提供公有的get和set方法，在方法体中进行合理值的判断；(3)在构造方法中调用set方法进行合理值的判断；对于封装的实现,大框架可以在编译器里实现:(1)eclipse中用右键-Source(alt+shift+s)中的带Generate的一些选项实现(2)idea中用右键-Generate…(alt+insert)选项中选项实现 static关键字:使用static关键字修饰成员变量表达静态的含义，该成员变量由对象层级提升为类层级被所有对象共享，该成员变量随着类的加载准备就绪，与是否创建对象无关。static关键字就是把对象级提高到类级,在类加载时就准备完成了,而不需要创建对象(new)。静态的成员(属性和方法)可以用 对象. 调用,但是一般推荐用 类名. 调用 类加载只做一次,包括:(1)类名. 时会类加载.(2)new对象 时会类加载.(3)程序员可以用程序加载,比如Class.forName() 使用方式:(1)在非静态的成员方法中既能访问非静态的成员也能访问静态的成员；(成员：成员变量 + 成员方法， 静态成员被所有对象共享)(2)在静态的成员方法中只能访问静态的成员不能访问非静态的成员；(成员：成员变量 + 成员方法， 调用静态方法时可能还没有创建对象)(3)只有隶属于类层级被所有对象共享的内容才可以使用static修饰；(不能滥用static关键字) 单例设计模式:(1)基本概念 在某些特殊场合中一个类对外提供且只提供一个对象，这样的类叫做单例类。 而设计单例类的思想和模式叫做单例设计模式，主要用于固定的场合。 (2)实现流程 a.私有化构造方法，使用private关键字修饰； b.声明本类类型的引用指向本类类型的对象，使用private static共同修饰； c.提供公有的get方法负责将成员变量的数值返回出去，使用static关键字修饰； (3)实现方式 单例设计模式的实现方式有两种：饿汉式 和 懒汉式，在以后的开发中推荐饿汉式。 public class Singleton { // 2.提供本类类型的引用指向本类类型的对象 // Person p = new Person(); private static Singleton sin = new Singleton(); //饿汉式 private static Singleton sin = null; //懒汉式 // 1.私有化构造方法，使用private关键字修饰 // private修饰构造方法表示该方法只能在本类的内部使用 private Singleton(){} // 3.提供公有的get方法负责将成员变量返回出去 public static Singleton getInstance() { //return sin; if(null == sin) { sin = new Singleton(); } return sin; } } 继承的基本概念:当多个类之间有相同的特征和行为时，可以将相同的内容提取出来组成一个公共类，让多个类吸收公共类中已有特征和行为而在多个类的内部编写自己独有特征和行为的方式，叫做继承。使用继承可以提高代码的复用性和扩展性以及可维护性。在Java语言中使用extends(扩展)关键字来表达继承关系。 如： public class Student extends Person {} - 表示Student类继承自Person类 其中Person类叫做基类、父类、超类 其中Student类叫做派生类、子类、孩子类 注意事项: (1)子类可以继承父类的成员变量和成员方法，其中私有成员变量可以继承但不可以直接使用，子类不可以继承父类的构造方法和私有方法。(2)无论使用何种方式构造子类对象时，都会自动调用父类中的无参构造方法来初始化从父类中继承下来的成员变量，相当于在子类构造方法第一行增加代码:super()的效果。(3)Java语言中只支持单继承不支持多继承，也就是一个子类只能有一个父类，但一个父类可以有多个子类。 方法的重写(override):(1)基本概念 若从父类中继承下来的方法不满足子类的需求时，就需要在子类中重新写一个与父类中一样的方法来覆盖从父类中继承的版本，这种方式就叫做重写。 (2)重写的原则(笔试题) a.要求方法名相同、参数列表相同、返回值类型相同，从jdk1.5开始允许返回子类类型 b.要求方法的访问权限不能变小，可以相同或者变大。 c.要求不能抛出更大的异常(异常机制)。","categories":[{"name":"java","slug":"java","permalink":"/categories/java/"}],"tags":[{"name":"封装","slug":"封装","permalink":"/tags/封装/"},{"name":"static关键字","slug":"static关键字","permalink":"/tags/static关键字/"},{"name":"继承与方法的重写","slug":"继承与方法的重写","permalink":"/tags/继承与方法的重写/"},{"name":"单例设计模式","slug":"单例设计模式","permalink":"/tags/单例设计模式/"}],"keywords":[{"name":"java","slug":"java","permalink":"/categories/java/"}]},{"title":"10.21JAVA学习进度","slug":"2019-10-21-21ribao","date":"2019-10-20T16:00:00.000Z","updated":"2019-11-20T03:12:31.969Z","comments":true,"path":"2019/10/21/2019-10-21-21ribao/","link":"","permalink":"/2019/10/21/2019-10-21-21ribao/","excerpt":"","text":"10.21Java学习进度封装,static关键字,单例设计模式:封装基本概念:为了避免对成员变量的赋值合法但是不合理,与现实生活不符,为了避免这种现象采用封装.封装可以保证成员变量的合理性. 封装的实现流程:(1)私有化成员变量，使用private关键字修饰；(2)提供公有的get和set方法，在方法体中进行合理值的判断；(3)在构造方法中调用set方法进行合理值的判断；对于封装的实现,大框架可以在编译器里实现:(1)eclipse中用右键-Source(alt+shift+s)中的带Generate的一些选项实现(2)idea中用右键-Generate…(alt+insert)选项中选项实现 static关键字:使用static关键字修饰成员变量表达静态的含义，该成员变量由对象层级提升为类层级被所有对象共享，该成员变量随着类的加载准备就绪，与是否创建对象无关。static关键字就是把对象级提高到类级,在类加载时就准备完成了,而不需要创建对象(new)。静态的成员(属性和方法)可以用 对象. 调用,但是一般推荐用 类名. 调用 类加载只做一次,包括:(1)类名. 时会类加载.(2)new对象 时会类加载.(3)程序员可以用程序加载,比如Class.forName() 使用方式:(1)在非静态的成员方法中既能访问非静态的成员也能访问静态的成员；(成员：成员变量 + 成员方法， 静态成员被所有对象共享)(2)在静态的成员方法中只能访问静态的成员不能访问非静态的成员；(成员：成员变量 + 成员方法， 调用静态方法时可能还没有创建对象)(3)只有隶属于类层级被所有对象共享的内容才可以使用static修饰；(不能滥用static关键字) 单例设计模式:(1)基本概念 在某些特殊场合中一个类对外提供且只提供一个对象，这样的类叫做单例类。 而设计单例类的思想和模式叫做单例设计模式，主要用于固定的场合。 (2)实现流程 a.私有化构造方法，使用private关键字修饰； b.声明本类类型的引用指向本类类型的对象，使用private static共同修饰； c.提供公有的get方法负责将成员变量的数值返回出去，使用static关键字修饰； (3)实现方式 单例设计模式的实现方式有两种：饿汉式 和 懒汉式，在以后的开发中推荐饿汉式。 public class Singleton { // 2.提供本类类型的引用指向本类类型的对象 // Person p = new Person(); private static Singleton sin = new Singleton(); //饿汉式 private static Singleton sin = null; //懒汉式 // 1.私有化构造方法，使用private关键字修饰 // private修饰构造方法表示该方法只能在本类的内部使用 private Singleton(){} // 3.提供公有的get方法负责将成员变量返回出去 public static Singleton getInstance() { //return sin; if(null == sin) { sin = new Singleton(); } return sin; } } 继承的基本概念:当多个类之间有相同的特征和行为时，可以将相同的内容提取出来组成一个公共类，让多个类吸收公共类中已有特征和行为而在多个类的内部编写自己独有特征和行为的方式，叫做继承。 使用继承可以提高代码的复用性和扩展性以及可维护性。 在Java语言中使用extends(扩展)关键字来表达继承关系。 如： public class Student extends Person {} - 表示Student类继承自Person类 其中Person类叫做基类、父类、超类 其中Student类叫做派生类、子类、孩子类","categories":[{"name":"java","slug":"java","permalink":"/categories/java/"}],"tags":[{"name":"封装","slug":"封装","permalink":"/tags/封装/"},{"name":"static关键字","slug":"static关键字","permalink":"/tags/static关键字/"},{"name":"单例设计","slug":"单例设计","permalink":"/tags/单例设计/"}],"keywords":[{"name":"java","slug":"java","permalink":"/categories/java/"}]},{"title":"10.19JAVA学习进度","slug":"2019-10-19-19ribao","date":"2019-10-18T16:00:00.000Z","updated":"2019-11-20T03:12:36.656Z","comments":true,"path":"2019/10/19/2019-10-19-19ribao/","link":"","permalink":"/2019/10/19/2019-10-19-19ribao/","excerpt":"","text":"10.19Java学习进度构造方法,方法重载,this关键字,方法的传参和调用:学习了构造方法的概念和使用无参和有参构造方法的使用 方法的重载概念和体现形式几个类的方法名相同,参数列表不同,就是重载在创建对象时候会根据不同参数调用不同构造方法 this关键字的使用方式,原理:在构造方法中代表当前正在构造的对象在成员方法中代表当前正在调用的对象 使用方式:(1)当形参变量和成员变量同名是,在构造方法或成员方法中通常优先使用形参变量,若希望使用成员变量就需要在变量名的前面加上this.进行说明(2)在构造方法的第一行使用this(实参)的方式可以调用本类中的其他构造方法 this关键字的作用:所有成员变量不能重名,再同一区域的局部变量不能重名,但是成员变量可以重命名.在局部变量的作用区域外,变量名代表成员变量,在局部变量的作用域之间,代表局部变量,如果想使用成员变量,需要this.的方式访问 在方法中可以通过调用关键字表示”调用该方法的那个对象”. this关键字和空值:引用类型变量用于存放对象的地址,可以给引用类型赋值为null,表示不指向任何对象.当某个引用类型变量为null时无法对对象实施访问,此时通过引用访问成员变量或调用方法会产生NullPointerException异常(空指针异常) 方法的传参和递归调用:方法的传参过程:(1)main方法是程序的入口，为main方法中的局部变量开辟内存空间并初始化；(2)调用max方法时为max方法的形参变量开辟内存空间；(3)使用实参变量给形参变量进行赋值操作，执行max方法的方法体；(4)当max方法结束后释放形参变量的内存空间；(5)main方法中的res得到max方法的返回值然后继续向下执行；(6)当main方法结束后释放局部变量的内存空间； a.当基本数据类型的变量作为方法的参数传递时，形参变量的改变不会影响到实参;b.当引用数据类型的变量作为方法的参数传递时，形参变量指向的内容发生改变后会影响到实参变量指向的内容；c.当引用数据类型的变量作为方法的参数传递时，形参变量改变指向后再改变指向的内容时不会影响到实参变量指向的内容； 递归调用: 调用方法的本质就是根据方法名跳过去(1)基本概念:方法叫做递归。如： void show(){ show(); } 案例： 自定义成员方法实现参数n阶乘的计算并返回。 解析： 5! = 5 * 4 * 3 * 2 * 1; 4! = 4 * 3 * 2 * 1; 3! = 3 * 2 * 1; 2! = 2 * 1; 1! = 1; n! = n * (n-1) * (n-2) * ... * 1; 5! = 5 * 4!; 4! = 4 * 3!; 3! = 3 * 2!; 2! = 2 * 1!; 1! = 1; n! = n * (n-1)!; 递推: int show(int n){ int res = 1; for(int i = n; i &gt; 1; i--){ res *=i; } return res; } 递归: if(1 == n){ return 1; } return n * show(n-1); (2)注意事项: a.必须找到递归的规律和退出条件；b.使用递归使得问题简单化而不是复杂化；c.若递归影响到程序的执行性能则使用递推取代之；","categories":[{"name":"java","slug":"java","permalink":"/categories/java/"}],"tags":[{"name":"构造方法,方法重载","slug":"构造方法-方法重载","permalink":"/tags/构造方法-方法重载/"},{"name":"this关键字","slug":"this关键字","permalink":"/tags/this关键字/"},{"name":"方法的传参和调用","slug":"方法的传参和调用","permalink":"/tags/方法的传参和调用/"}],"keywords":[{"name":"java","slug":"java","permalink":"/categories/java/"}]},{"title":"10.18JAVA学习进度","slug":"2019-10-18-18ribao","date":"2019-10-17T16:00:00.000Z","updated":"2019-11-20T03:12:43.047Z","comments":true,"path":"2019/10/18/2019-10-18-18ribao/","link":"","permalink":"/2019/10/18/2019-10-18-18ribao/","excerpt":"","text":"10.18Java学习进度数组元素之间的操作,号码的生成和去重,面向对象的基本概念和三大特征,了解了类和对象的概念:学习了数组元素之间的拷贝 统计拆分的原理和实现:求出一串数字各数字出现的次数 双色球号码的生成和去重去重方法:当前元素与之前元素对比如果有相同的就使用i– 再重新生成一遍当前数组下标的元素 面向对象的基本概念:万物皆对象!!面向对象就是指以特征和行为的观点去分析现实事物的方式 c语言是面向过程c++是既面向过又面向对象java是面向对象 面向对象编程的三大特征:封装、继承、多态 了解了对象和类的概念 类的定义: class 类名{ } 成员变量定义的语法格式: class 类名{ 数据类型 成员变量名 = 初始值;(初始值通常省略) } 对象的创建: new 类名(); 对象的引用:(例) new Person(); Person p = new Person(); 成员方法: class 类名{ 返回值类型 成员方法名(形参列表){ 成员方法体 } } (例): class Person{ viod show(){ System.out.println(&quot;测试&quot;); } } (返回数据类型要与形参列表相同) 成员方法的调用:p.show();","categories":[{"name":"java","slug":"java","permalink":"/categories/java/"}],"tags":[{"name":"数组元素之间的操作","slug":"数组元素之间的操作","permalink":"/tags/数组元素之间的操作/"},{"name":"号码的生成和去重","slug":"号码的生成和去重","permalink":"/tags/号码的生成和去重/"},{"name":"面向对象的基本概念和三大特征","slug":"面向对象的基本概念和三大特征","permalink":"/tags/面向对象的基本概念和三大特征/"},{"name":"了解了类和对象的概念","slug":"了解了类和对象的概念","permalink":"/tags/了解了类和对象的概念/"}],"keywords":[{"name":"java","slug":"java","permalink":"/categories/java/"}]},{"title":"10.17JAVA学习进度","slug":"2019-10-17-17ribao","date":"2019-10-16T16:00:00.000Z","updated":"2019-11-20T03:12:34.339Z","comments":true,"path":"2019/10/17/2019-10-17-17ribao/","link":"","permalink":"/2019/10/17/2019-10-17-17ribao/","excerpt":"","text":"10.17Java学习进度对java的简单了解和入门,简单的逻辑结构和循环结构,简单的数组操作第一课: 了解了java的历史看了基础的helloworld打印 第二课: 学习了变量进制转换还有各种数据类型 第三课:学习了各种关系运算符,算数运算符三目运算符If else结构 第四课:学习了循环结构,for循环嵌套While循环 第五课: 学习了数组的操作,增删改查,二维数组的操作","categories":[{"name":"java","slug":"java","permalink":"/categories/java/"}],"tags":[{"name":"对java的简单了解和入门","slug":"对java的简单了解和入门","permalink":"/tags/对java的简单了解和入门/"},{"name":"简单的逻辑结构和循环结构","slug":"简单的逻辑结构和循环结构","permalink":"/tags/简单的逻辑结构和循环结构/"},{"name":"简单的数组操作","slug":"简单的数组操作","permalink":"/tags/简单的数组操作/"}],"keywords":[{"name":"java","slug":"java","permalink":"/categories/java/"}]},{"title":"10.14","slug":"2019-10-14-14jishu","date":"2019-10-13T16:00:00.000Z","updated":"2019-11-20T03:12:38.702Z","comments":true,"path":"2019/10/14/2019-10-14-14jishu/","link":"","permalink":"/2019/10/14/2019-10-14-14jishu/","excerpt":"","text":"看板娘代码:&lt;script src=&quot;https://cdn.jsdelivr.net/npm/jquery/dist/jquery.min.js&quot;&gt;&lt;/script&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/font-awesome/css/font-awesome.min.css&quot;/&gt; &lt;script src=&quot;https://cdn.jsdelivr.net/gh/stevenjoezhang/live2d-widget/autoload.js&quot;&gt;&lt;/script&gt;","categories":[{"name":"分享","slug":"分享","permalink":"/categories/分享/"}],"tags":[{"name":"看板娘","slug":"看板娘","permalink":"/tags/看板娘/"}],"keywords":[{"name":"分享","slug":"分享","permalink":"/categories/分享/"}]},{"title":"10.13","slug":"2019-10-13-13jishu","date":"2019-10-12T16:00:00.000Z","updated":"2019-11-20T03:12:40.847Z","comments":true,"path":"2019/10/13/2019-10-13-13jishu/","link":"","permalink":"/2019/10/13/2019-10-13-13jishu/","excerpt":"","text":"今天发现了一个时间小人的特效 很有意思:&lt;div&gt; &lt;embed wmode=&quot;transparent&quot; src=&quot;http://chabudai.sakura.ne.jp/blogparts/honehoneclock/honehone_clock_tr.swf&quot; quality=&quot;high&quot; bgcolor=&quot;#ffffff&quot; width=&quot;160&quot; height=&quot;70&quot; name=&quot;honehoneclock&quot; align=&quot;middle&quot; allowscriptaccess=&quot;always&quot; type=&quot;application/x-shockwave-flash&quot; pluginspage=&quot;http://www.macromedia.com/go/getflashplayer&quot;&gt; &lt;/div&gt; 或者: &lt;script charset=&quot;Shift_JIS&quot; src=&quot;http://chabudai.sakura.ne.jp/blogparts/honehoneclock/honehone_clock_tr.js&quot;&gt;&lt;/script&gt;","categories":[{"name":"分享","slug":"分享","permalink":"/categories/分享/"}],"tags":[{"name":"小人特效","slug":"小人特效","permalink":"/tags/小人特效/"}],"keywords":[{"name":"分享","slug":"分享","permalink":"/categories/分享/"}]},{"title":"9.27技术分享","slug":"2019-09-27-27jishu","date":"2019-09-26T16:00:00.000Z","updated":"2019-11-20T03:12:45.943Z","comments":true,"path":"2019/09/27/2019-09-27-27jishu/","link":"","permalink":"/2019/09/27/2019-09-27-27jishu/","excerpt":"","text":"今天发现了git克隆下来的远程库特别大:经过查询之后发现是每次推送之后都会留下记录缓存，这样很多没用的记录就会占用多余的空间，别人克隆的时候也会多耗费时间，今天我查到了一个清除无用记录的方法。 首先进入你的本地库 cd zhengyupengzz.github.io 新建并切换到一个分支 git checkout –orphan latest_branch 选中全部文件 git add -A 提交 git commit -am “Reinitialize” 删除原分支 git branch -D master 将本分支改为原分支名 git branch -m master 推送到远程分支 git push -f origin master 现在你再去GitHub上去看提交分支的记录，会发现只有一次提交了 可以删除本地库重新将远程库克隆下来，这次就没有那些多余的提交记录了！ 参考博客地址","categories":[{"name":"分享","slug":"分享","permalink":"/categories/分享/"}],"tags":[{"name":"git清理","slug":"git清理","permalink":"/tags/git清理/"}],"keywords":[{"name":"分享","slug":"分享","permalink":"/categories/分享/"}]},{"title":"9.27七十周年心得","slug":"2019-09-27-27xinde","date":"2019-09-26T16:00:00.000Z","updated":"2019-11-20T03:12:49.040Z","comments":true,"path":"2019/09/27/2019-09-27-27xinde/","link":"","permalink":"/2019/09/27/2019-09-27-27xinde/","excerpt":"","text":"今天看了很多关于国家的视频,发现这七十年发展的是真不容易70年的风雨征程，带来了祖国繁荣强大，如同阳光照亮了我们的前程，指明了我们前进的方向，带领全国各族人民从贫穷走向富裕，从胜利走向辉煌。 中华人民共和国国旗旗面为红色象征革命。旗上的五颗五角星及其相互关系象征共产党领导下的革命人民大团结。星用黄色是为着在红地上显出光明，四颗小五角星各有一角正对着大星的中心点，表示围绕着一个中心而团结。每逢国庆，去天安门广场看升国旗是无数人心中的梦想。因此，利用国庆长假去北京游玩的人们，通常会赶早来到天安门广场看国旗班的军人升旗，以表达对祖国的无比热爱，看着五星红旗徐徐升起，心中的激动无以言表。每年10月1日是我国的国庆节，我国于1999年修订发布《全国年节及纪念日放假办法》，将国庆节与相邻的周六、日组合为7天的国庆长假，被称之为“国庆黄金周”，用放假的形式，让老百姓共同感受国庆的欢乐。 回首这70年，中华人民走得每一步都是步履蹒跚，每一步都付出了巨大牺牲。但是如今中国经过几十年来的艰苦建设，已取得了“乘长风，破万里浪”的迅猛发展:《辉煌中国》之《圆梦工程》透过港珠澳大桥、胡麻岭隧道、郑万铁路、复兴号、上海洋山港自动化码头、中国移动互联网等一个个超级工程，领略五年来一张张中国基础建设的大网，如何编织起人民走向幸福、美好的希望版图，托举起中华民族伟大复兴的中国梦。 面对飘扬的国旗亿万双眼睛注视五星红旗冉冉升起,亿万颗心灵伴随祖国母亲一起搏动。抬头仰望,发现鲜艳的国旗已在共和国的上空飘扬了半个世纪。在世纪之交的今天,共和国已走过了七十个春秋。七十年前，”洋油” ”洋面” 还充斥着中国的大江南北;七十年后，许多国产已遍及世界各地。 七十年前,我们的祖先还把汉代的耕梨插进二十世纪的农田;七十年后,现代化机械已开进中国的农家。七十年前,港澳游子还站在金门望厦门;五十年后,归国侨胞已站在厦门望金门。-样的遥望,却是两样的情形。七十年里，萧瑟秋风今又是，换了人间。 依旧淳朴中隐着聪慧,荒中透着俊季，可再也听不见那血泪凝结的叹息,更也找不到贫贱不堪的足印，再也寻不见你昔日枯瘦蹒跚的身影,麦穗和齿轮构筑的太阳,伸出金色的臂膀擎着一片晴空,逶道而来,斩断阴霾的剑光在普照众生的沧桑。 你傲然屹立于世界的东方,不管身边的风云如何的变幻,始终坚定地沿真理的方向勇往直前。你般迎着八面春风,在辐射的节奏里,眺望着更加灿烂的前程。 我灵魂的纤绳永系向你风帆的桅杆;我手中的彩笔,永远写你壮重的风姿; 面对飘扬国旗，血液在奔涌，思绪在沸腾,理想的根须在土里扎得更深。面对飘扬的国旗,我们已把自己溶入母亲炙热的胸襟。","categories":[{"name":"心得","slug":"心得","permalink":"/categories/心得/"}],"tags":[{"name":"心得","slug":"心得","permalink":"/tags/心得/"}],"keywords":[{"name":"心得","slug":"心得","permalink":"/categories/心得/"}]},{"title":"9.26日报","slug":"2019-09-26-26ribao","date":"2019-09-25T16:00:00.000Z","updated":"2019-11-20T03:12:51.665Z","comments":true,"path":"2019/09/26/2019-09-26-26ribao/","link":"","permalink":"/2019/09/26/2019-09-26-26ribao/","excerpt":"","text":"今天也是收获颇丰的一天:因为要学四个数据库,再ubuntu安装比较麻烦,所以我刷回了Windows系统. 但是安装了虚拟机的deep系统也是基于linux的. 今天已经将四个数据库安装完成,环境也配置好了.","categories":[{"name":"心得","slug":"心得","permalink":"/categories/心得/"}],"tags":[{"name":"心得","slug":"心得","permalink":"/tags/心得/"}],"keywords":[{"name":"心得","slug":"心得","permalink":"/categories/心得/"}]},{"title":"9.19阶段感悟","slug":"2019-09-19-19ganwu","date":"2019-09-18T16:00:00.000Z","updated":"2019-11-20T03:11:35.316Z","comments":true,"path":"2019/09/19/2019-09-19-19ganwu/","link":"","permalink":"/2019/09/19/2019-09-19-19ganwu/","excerpt":"","text":"从加入兄弟会到现在的感悟与总结从听说兄弟会的学习模式开始,我就一直盼望着加入兄弟会,然而我也确实很幸运地通过面试加入进了兄弟会. 刚加入时候是迷茫的,不知道该做些什么,遇见问题无从下手,仅仅是安装ubuntu系统就花费了一整天的时间. 当然兄弟会的教官也教了我们自学效率比较高的方式,查阅资料和向已经学会的同学交流请教,我觉得这很符合现在公司里面的学习方式,进到公司里面不会被特意地教学只能自己根据资料和向前辈请教来快速提升自己. 在掌握了这种自学方式之后,我觉得比平时上课老师教课的学习效率还要高,不只是学习进度可以随自己调,更重要的是不困!!!,说实话到兄弟会一来我还没有过上课时候困得神志模糊那种感觉,有的也仅仅是眼睛的疲劳. 这种精神的清醒我觉得得益于明确的学习目标,和自己自由的时间分配,在每一天都没有打盹的情况下,我觉得学习效率高多了. 再就是兄弟会的成员构成,有php的,java的,python的,有原来学习各种学科的同学,所以在我们的目标是最少学习两门语言的情况下,这种成员构成就有很好的学习氛围. 当在一门学科遇到了问题的时候,可以很容易地请教到其他学过这门科目的同学,在那些官方的知识被人性化的整理之后,比原来官方文档更容易理解了. 还有听书环节,我觉得不光是要听那些名人名书的理念,更要注重的是看看这些名人是怎么想到从更高的角度去看待某一件事,用我们一位教官说的话就是,”格局”,当一个人格局大了,他的人生观价值观自然就不同与普通人,目标不同前进的动力也会不同. 最后总结一下: 加入了兄弟会,我的学习方式彻底改变了,效率变得更高了,人生格局也发现了改变,目标也更加远大.在兄弟会了不单单学习了知识,更让精神又成长了一步. 最后希望兄弟会的兄弟们都能顺利地完成兄弟会的任务,顺利地走上自己预想的那条人生轨迹.","categories":[{"name":"总结","slug":"总结","permalink":"/categories/总结/"}],"tags":[{"name":"总结","slug":"总结","permalink":"/tags/总结/"}],"keywords":[{"name":"总结","slug":"总结","permalink":"/categories/总结/"}]},{"title":"9.18连接远程服务器","slug":"2019-09-18-18jishu","date":"2019-09-17T16:00:00.000Z","updated":"2019-11-20T03:11:32.887Z","comments":true,"path":"2019/09/18/2019-09-18-18jishu/","link":"","permalink":"/2019/09/18/2019-09-18-18jishu/","excerpt":"","text":"连接远程服务器,上传文件方法 安装rdesktop sudo apt-get install rdesktop 连接服务器 rdesktop IP -u Administrator -r disk:app=/home/USER/桌面/node 连接远程服务器，并把位于/home/USER/桌面/node里的内容虚拟出一个映射盘在服务器上。 -f 全屏 -u xxxxxx 登录用户，可选 -p xxxxxx 登录密码，可选 -r clipboard:PRIMARYCLIPBOARD 重要，剪贴板可以与远程桌面交互 -a 16 颜色，可选，不过最高就是16位 -r disk:wj=/home/magicgod映射虚拟盘，可选，会在远程机器的网上邻居里虚拟出一个映射盘，功能很强，甚至可以是软盘或光盘 安装nodejs 1.下载地址：https://nodejs.org/zh-cn/download/ 选择相应的版本下载,这里下载的是windows的zip文件。 2.解压缩 将下载的文件解压到要安装的位置，并新建两个目录： node-global :npm全局安装位置 node-cache：npm 缓存路径 3.配置 将node.exe 所在的目录添加到path环境变量，这样我们在使用命令行时就可以在任意路径使用node命令 那么node-global:npm全局安装位置，node-cache：npm缓存路径 又是怎么与npm发生关系呢？ 通过如下命令进行配置： npm config set prefix “C:\\Program Files\\node\\node-global” npm config set cache “C:\\Program Files\\node\\node-cache” 4.在命令行中输入如下命令测试 node -v npm -v 访问域名访问到项目 我使用的是 phpstudy 使用很方便","categories":[{"name":"教程","slug":"教程","permalink":"/categories/教程/"}],"tags":[{"name":"远程连接服务器","slug":"远程连接服务器","permalink":"/tags/远程连接服务器/"}],"keywords":[{"name":"教程","slug":"教程","permalink":"/categories/教程/"}]},{"title":"9.16技术分享文档","slug":"2019-09-16-16jishu","date":"2019-09-15T16:00:00.000Z","updated":"2019-11-20T03:11:37.951Z","comments":true,"path":"2019/09/16/2019-09-16-16jishu/","link":"","permalink":"/2019/09/16/2019-09-16-16jishu/","excerpt":"","text":"jquery 常用事件整理 鼠标点击事件 click 鼠标双击事件 dblclick 鼠标指针进入事件 mouseenter 鼠标指针离开事件 mouseleave 鼠标指针悬停 hover 字段内按键次数 $(&quot;input&quot;).keypress(function(){ $(&quot;span&quot;).text(i+=1); }); 键盘被按下时改变颜色 $(&quot;input&quot;).keydown(function(){ $(&quot;input&quot;).css(&quot;background-color&quot;,&quot;yellow&quot;); }); 键盘松开时改变颜色 $(&quot;input&quot;).keyup(function(){ $(&quot;input&quot;).css(&quot;background-color&quot;,&quot;pink&quot;); }); 提交表单时 submit 改变时 change 获得焦点时 focus 失去焦点时 blur 全部加载时 load 调整大小 resize 元素滚动 scroll 离开时 unload","categories":[{"name":"命令","slug":"命令","permalink":"/categories/命令/"}],"tags":[{"name":"Jquery","slug":"Jquery","permalink":"/tags/Jquery/"}],"keywords":[{"name":"命令","slug":"命令","permalink":"/categories/命令/"}]},{"title":"9.10日报","slug":"2019-09-10-10ribao","date":"2019-09-09T16:00:00.000Z","updated":"2019-11-20T03:11:45.588Z","comments":true,"path":"2019/09/10/2019-09-10-10ribao/","link":"","permalink":"/2019/09/10/2019-09-10-10ribao/","excerpt":"","text":"今天也是收获颇丰的一天,在同学那学到了很多:今天上午开始去背的倒计时,但是背了挺长时间背得效率也不是那么高. 然后看了同学自己按照自己的思路写的代码,感觉思路清晰多了. 今天学到了,看代码不要按照固有思路去看 别人的代码也未必是最好的代码,自己捋请思路写一遍也许效果更好.","categories":[{"name":"心得","slug":"心得","permalink":"/categories/心得/"}],"tags":[{"name":"心得","slug":"心得","permalink":"/tags/心得/"}],"keywords":[{"name":"心得","slug":"心得","permalink":"/categories/心得/"}]},{"title":"9.09日报","slug":"2019-09-09-09ribao","date":"2019-09-08T16:00:00.000Z","updated":"2019-11-20T03:11:48.028Z","comments":true,"path":"2019/09/09/2019-09-09-09ribao/","link":"","permalink":"/2019/09/09/2019-09-09-09ribao/","excerpt":"","text":"今天考考了两个js特效的实现页面,总结一下:在做选项卡页面的时候,忘记了引用jqery文件,导致一直运行失败 还好在最后的时候想了起来. 还有样式要记得加上浮动效果比较好, 这两个页面我样式做的都不是很好看,css要复习复习了. 下午和晚自习又看了几个页面,明天争取顺利考过.","categories":[{"name":"心得","slug":"心得","permalink":"/categories/心得/"}],"tags":[{"name":"心得","slug":"心得","permalink":"/tags/心得/"}],"keywords":[{"name":"心得","slug":"心得","permalink":"/categories/心得/"}]},{"title":"9.07技术分享文档","slug":"2019-09-07-07jishu","date":"2019-09-06T16:00:00.000Z","updated":"2019-11-20T03:11:40.488Z","comments":true,"path":"2019/09/07/2019-09-07-07jishu/","link":"","permalink":"/2019/09/07/2019-09-07-07jishu/","excerpt":"","text":"今天分享几个经过细心挑选了的较高质量的壁纸网站:娟娟壁纸 彼岸图网 极简壁纸 wallhaven pixabay wallpaperscraft Simple Desktops(极简风) GameWallpapers(游戏专题壁纸) Wallpaper Cave Moviemania(电影壁纸) unsplash(摄影壁纸) pexels(高质量图片社区)视频专区 gratisography(艺术,脑洞图片)","categories":[{"name":"分享","slug":"分享","permalink":"/categories/分享/"}],"tags":[{"name":"壁纸","slug":"壁纸","permalink":"/tags/壁纸/"}],"keywords":[{"name":"分享","slug":"分享","permalink":"/categories/分享/"}]},{"title":"9.06git命令详细整理之二","slug":"2019-09-06-06jishu","date":"2019-09-05T16:00:00.000Z","updated":"2019-11-20T03:11:42.741Z","comments":true,"path":"2019/09/06/2019-09-06-06jishu/","link":"","permalink":"/2019/09/06/2019-09-06-06jishu/","excerpt":"","text":"git命令整理博客1 还有大家一起整理了挺全的命令整理： 查看远程库配置信息 git remote show 远程库名 给远程地址添加别名 git remote add 别名 远程库地址 修改远程库名字 git remote rename 老名字 新名字 删除远程库 git remote rm 库名 分支取下来自动合并 git pull 加注标签 -m后跟说明 git tag -a 标签名 -m”说明” 给原来的标签加说明 git tag -s v1.5 -m”说明” 轻量级标签 git tag 标签名 -lw 发送标签到远程服务器 git push origin 标签名 创建分支 git branch 分支名 切换分支 git chechout 分知名 改变head指针指向位置 git reset –hard 回退历史的索引值 显示当前HEAD指针在哪 git reset –hard 取消缓存 git reset HEAD 文件名 合并分支 git merge 分支 删除分支 git branch -d 分支名 查看所有分支信息,列出所有本地分支 git branch 查看各个分支最后一次提交的对象 git branch -v 查看哪些分支已被并入当期分支 git branch –merge 查看尚未合并的工作 git branch –no-merged 推送分支到远程仓库 git push 远程库名 分支名 跟踪远程分支 git checkout –track orgin/master 分享标签 git push origin 标签名 分享所有标签 git push origin -tag 推送本地分支 git push origin 分支名 删除远程分支 git rm origin:分支名 新建一个目录,将其初始化为git代码库 git init 编辑git配置文件 git config -e [–global] 查看git的配置信息 git config –list 设置提交代码时的用户信息 git config [–global] user.name “[name]” 设置提交代码时的邮箱信息 git config [–global] user.email “[email address]” 添加指定文件到暂存区 git add [file1] [file2] 添加当前目录的所有文件到暂存区 git add . 对于同一个文件的多处变化,可以实现分次提交 git add -p 提交暂存区到仓库区 git commit -m”” 提交暂存区的制定文件到仓库区 git commit [file1][file2] -m”” 提交工作区自上次commit之后的变化,直接到仓库区 git commit -a 提交时显示所有diff信息 git commit -v 使用一次新的commit,替代上次提交, git commit –amend -m”” 重做上一次comit,并包括指定文件的新变化 git commit –aend [file1][file2] 列出所有远程分支 git branch -r 列出所有本地分支和远程分支 git branch -a 新建一个分支 git branch 分支名 新建一个分支并切到该分支 git checkout -b 分支名 新建一个分支,指向指定commit的哈希值 git branch [branch][commit] 新建一个分支,与指定的远程分子建立追踪关系 git branch –track [branch] [remote-branch] 切换到指定分支 git checkout [branch-name] 切换到上一个分支 git checkout - 新建一个分支,指向某个tag git checkout -b [branch][tag] 建立追踪关系,在现有分支与指定的远程分支之间 git branch –set-upstream [branch] [remote-branch] 选择一个commit,合并进当前分支 git cherry-pick[commit] 删除分支 git branch -d [branch-name] 删除远程分支 git push origin –delete [branch-name] 删除远程分支 git branch -dr [remote/branch] 列出所有tag git tag 新建一个tag在当前commit git tag [tag] 新建一个tag在指定commit","categories":[{"name":"命令","slug":"命令","permalink":"/categories/命令/"}],"tags":[{"name":"git","slug":"git","permalink":"/tags/git/"}],"keywords":[{"name":"命令","slug":"命令","permalink":"/categories/命令/"}]},{"title":"9.05git命令详细整理","slug":"2019-09-05-05jishu","date":"2019-09-04T16:00:00.000Z","updated":"2019-11-20T03:12:01.619Z","comments":true,"path":"2019/09/05/2019-09-05-05jishu/","link":"","permalink":"/2019/09/05/2019-09-05-05jishu/","excerpt":"","text":"git命令整理博客1 还有大家一起整理了挺全的命令整理： 初始化git库，在当前目录新建一个git代码库 git init git库，下载一个项目和它的整个代码历史 git clone 添加追踪文件，如果不写文件名就是该目录下的所有文件添加跟踪,添加指定目录到暂存区，包括子目录 git add 文件名 提交到暂存区 git commit -m”” 检查当前文件状态 git status 检查工作区和暂存区的差别 git diff 查看上次提交和未暂存的差别 git diff –cached [file] 分支之间的区别 git diff 原分支 目标分支 删除文件 git rm 要删除的文件 将文件在暂存区删除，也就是取消跟踪，停止追踪指定文件，但该文件会保留在工作区 git rm –cached 文件 移动文件/修改文件名并将这个改名放入暂存区 git mv 检查提交记录 git log 记录显示在一行 git log –oneine 显示之前的修改记录 git reflog 修改最后提交，也可以说是撤销最后一次提交 git commit –amend 抛弃修改命令，回到之前版本，回复暂存区的制定文件到工作区 git checkout 文件名 把暂存区的修改撤销掉 git reset HEAD file 查看当时配置的有那些远程库，加上-v显示对应的克隆地址 git remote 从远程仓库抓取数据 git fetch origin","categories":[{"name":"命令","slug":"命令","permalink":"/categories/命令/"}],"tags":[{"name":"git","slug":"git","permalink":"/tags/git/"}],"keywords":[{"name":"命令","slug":"命令","permalink":"/categories/命令/"}]},{"title":"9.4日报","slug":"2019-09-04-04ribao","date":"2019-09-03T16:00:00.000Z","updated":"2019-11-20T03:11:50.652Z","comments":true,"path":"2019/09/04/2019-09-04-04ribao/","link":"","permalink":"/2019/09/04/2019-09-04-04ribao/","excerpt":"","text":"今天下午考了一个node聊天室，一个js的轮播图。 考试总结：今天的考试只有一个半小时就要做出一个聊天室和一个轮播图，正常来说一个半小时做两个基本是完不成的，所以大家都被罚了一下。 然后在进行考试总结的时候我们发现了老师是考验我们团队协作能力而不是自己写出来。 心得： 团队协作效率比个人高得多，平时要多与大家交流技术性问题，做项目时候更要多交流一下功能怎么实现的。","categories":[{"name":"心得","slug":"心得","permalink":"/categories/心得/"}],"tags":[{"name":"心得","slug":"心得","permalink":"/tags/心得/"}],"keywords":[{"name":"心得","slug":"心得","permalink":"/categories/心得/"}]},{"title":"9.03lamp环境搭建","slug":"2019-09-03-03jishu","date":"2019-09-02T16:00:00.000Z","updated":"2019-11-20T03:11:54.861Z","comments":true,"path":"2019/09/03/2019-09-03-03jishu/","link":"","permalink":"/2019/09/03/2019-09-03-03jishu/","excerpt":"","text":"lamp环境的搭建方法与我遇到的问题首先我在网上找到了一个很全的安装教程： lamp安装教程 还有一个mysql安装教程： mysql安装教程 在配置lamp的时候也遇到了几个问题，我整理了一下：在配置了phpMyAdmin结束的时候我遇到了这种问题: phpMyAdmin错误：缺少mbstring扩展名 请检查您的PHP配置 处理方法：运行以下两段代码即可 sudo apt-get install phpmyadmin php-mbstring php-gettext systemctl restart apache2 我还遇到了mysql数据库的root密码忘记了，比较尴尬…： 处理方法：在文件中修改一下root密码 1.在终端输入 sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf 2.在文件内搜索skip-external-locking,在下面添加一行: skip-grant-tables 3.重启mysql sudo service mysql restart 4.在终端输入命令mysql,进入mysql 5.使用命令use mysql;切换到mysql数据库 6.修改root密码 UPDATE mysql.user SET authentication_string=password(‘你想设置的密码’) WHERE User=’root’ AND Host =’localhost’; 7.修改字段plugin(Plugin字段标识可以用于验证用户身份的插件，如果字段为空，服务器使用内建授权验证机制验证用户身份) UPDATE user SET plugin=”mysql_native_password”; 8.刷新权限,输入命令 flush privileges; 9.退出mysql quit; 10.回到设置的文件内(/etc/mysql/mysql.conf.d/mysqld.cnf)内把添加的命令注释掉 sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf 将skip-grant-tables删除。 此方法参考博客","categories":[{"name":"教程","slug":"教程","permalink":"/categories/教程/"}],"tags":[{"name":"lamp安装","slug":"lamp安装","permalink":"/tags/lamp安装/"}],"keywords":[{"name":"教程","slug":"教程","permalink":"/categories/教程/"}]},{"title":"9.2日报","slug":"2019-09-02-02ribao","date":"2019-09-01T16:00:00.000Z","updated":"2019-11-20T03:11:58.465Z","comments":true,"path":"2019/09/02/2019-09-02-02ribao/","link":"","permalink":"/2019/09/02/2019-09-02-02ribao/","excerpt":"","text":"学习进度 今天开始回去翻看之前的git,vim,linux,js笔记，今天看完了git,vim。明天继续看linux命令与js语法。我整理了一下不太熟的命令在这里。 不太熟悉的命令：git mergr -m”合并”&lt;分支名&gt; 将指定分支合并到当前分支 git pull : 同步指定分支的合并，有追踪关系的 git pull origin dev:master 将远程dev与本地master合并 git pull origin dev 将远程dev合并到当前分支 git stash 贮藏当前工作区的修改，没有commit的","categories":[{"name":"命令","slug":"命令","permalink":"/categories/命令/"}],"tags":[{"name":"git","slug":"git","permalink":"/tags/git/"}],"keywords":[{"name":"命令","slug":"命令","permalink":"/categories/命令/"}]},{"title":"8.30日报","slug":"2019-08-30-30ribao","date":"2019-08-29T16:00:00.000Z","updated":"2019-11-20T03:10:34.118Z","comments":true,"path":"2019/08/30/2019-08-30-30ribao/","link":"","permalink":"/2019/08/30/2019-08-30-30ribao/","excerpt":"","text":"学习进度 今天开始学node的socket模块，在网上查了各种资源勉强做出来一个简易的多人聊天室，也遇到了一些问题。 问题总结在关闭端口时总会出现关闭不完全的情况，我在网上寻找了这种方法： lsof -i :端口号 查询该端口占用情况 kill -9 查询出对应的PID 关闭端口进程","categories":[{"name":"总结","slug":"总结","permalink":"/categories/总结/"}],"tags":[{"name":"端口占用","slug":"端口占用","permalink":"/tags/端口占用/"}],"keywords":[{"name":"总结","slug":"总结","permalink":"/categories/总结/"}]},{"title":"8.30技术文档","slug":"2019-08-30-30jishu","date":"2019-08-29T16:00:00.000Z","updated":"2019-11-20T03:10:29.109Z","comments":true,"path":"2019/08/30/2019-08-30-30jishu/","link":"","permalink":"/2019/08/30/2019-08-30-30jishu/","excerpt":"","text":"js的常用语法（整理版） 今天在看node的空闲时间又重新整理了之前的js语法： 连接外部js文件： &lt;script src=&quot;js文件&quot;&gt;&lt;/script&gt; alert() 弹出警告框 document.write() 将内容写到HTML文档中 innerHTML=&quot;写入到HTML元素&quot; console.log() 写入到浏览器的控制台 document.write(&quot;&lt;h1&gt;&lt;这是一个标题/h1&gt;&quot;) 直接写入到html输出流 改变html内容： &lt;p id=&quot;demo&quot;&gt;哈哈哈&lt;/p&gt; &lt;script&gt; function myFunction(){ //定义一个类 x=document.getElementById(&quot;demo&quot;); //找到元素，获取 //获取类元素：gitElementsByClassName //获取标签元素：gitElementsByTagName x.innerHTML=&quot;Hello&quot;; //改变内容 x.style.color=&quot;#ff0000&quot;; //改变样式 } &lt;/script&gt; &lt;button type=&quot;button&quot; onclick=&quot;myFunction()&quot;&gt;点这里&lt;/button&gt; &lt;button onclick=&quot;getElementById(&#39;demo&#39;).innerHTML=Date()&quot;&gt;时间&lt;/button&gt; //点击后修改demo处文字为Date &lt;button onclick=&quot;this.innerHTML=Date()&quot;&gt;时间&lt;/button&gt; //点击后修改按钮上的内容为Date 常见的HTML事件： onchange HTML元素改变 onclick 用户点击HTML元素 onmouseover 用户在HTML元素上移动鼠标 onmouseout 用户从一个HTML元素上移开鼠标 onkeydown 用户按下键盘按键 onload 浏览器已完成页面的加载 字符串.lenght 字符串长度 setInterval() 间隔指定毫秒书不停地执行指定代码setTimeout() 在指定毫秒数后执行指定代码 myVar=setTimeout(function(){alert(“Hello”)},3000); //等待3秒后弹出Hello clearTimeout(myVar); 停止执行 clearInterval(myVar); 停止执行","categories":[{"name":"JS","slug":"JS","permalink":"/categories/JS/"}],"tags":[{"name":"js","slug":"js","permalink":"/tags/js/"}],"keywords":[{"name":"JS","slug":"JS","permalink":"/categories/JS/"}]},{"title":"8.29技术文档","slug":"2019-08-29-29jishu","date":"2019-08-28T16:00:00.000Z","updated":"2019-11-20T03:10:40.008Z","comments":true,"path":"2019/08/29/2019-08-29-29jishu/","link":"","permalink":"/2019/08/29/2019-08-29-29jishu/","excerpt":"","text":"简易的图片轮播今天主要学习了轮播图的原理和简易制作，以下是我轮播图的代码： &lt;!DOCTYPE html&gt; &lt;html lang=&quot;zh&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;轮播图&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; p{ text-align: center; font-size: 25px; color: rgb(95, 152, 160); font-family: fantasy; } .imgBox{ position: absolute; left: 25%; border-top: 2px solid rgb(95, 152, 160); width: 50%; height: 500px; } .imgBox img{ width: 50%; margin: 0 auto; padding-top: 30px; } .img1{ display: block; } .img2{ display: none; } .img3{ display: none; } .btn-ctrl{ position: relative; top: 20%; cursor: pointer; font-size: 36px; color: red; font-weight: 500; } #btn-prev{ left: 0px; float: left; } #btn-next{ right: 0px; float: right; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;p&gt;图片轮播&lt;/p&gt; &lt;div class=&quot;imgBox&quot;&gt; &lt;div id=&quot;btn-prev&quot; class=&quot;btn-ctrl&quot; onclick=&quot;clock(0)&quot;&gt;&amp;lt;&lt;/div&gt; &lt;div id=&quot;btn-next&quot; class=&quot;btn-ctrl&quot; onclick=&quot;clock(1)&quot;&gt;&amp;gt;&lt;/div&gt; &lt;img class=&quot;img-slide img1&quot; src=&quot;images/1.jpg&quot;&gt; &lt;img class=&quot;img-slide img2&quot; src=&quot;images/2.jpg&quot;&gt; &lt;img class=&quot;img-slide img3&quot; src=&quot;images/3.jpg&quot;&gt; &lt;/div&gt; &lt;/body&gt; &lt;script type=&quot;text/javascript&quot;&gt; var index=0; function changeImg() { index++; var a=document.getElementsByClassName(&quot;img-slide&quot;); if(index&gt;=a.length) index=0; for(var i=0;i&lt;a.length;i++){ a[i].style.display=&#39;none&#39;; } a[index].style.display=&#39;block&#39;; } function clock(cc){ switch(cc){ case 0: index=index-2; if(index&lt;-1) index=1; break; case 1: index; break; } } setInterval(changeImg,2000); &lt;/script&gt; &lt;/html&gt; 原理：用js获取图片的类组成数组，利用循环将所有图片都先隐藏，再利用图片数组下标逐个显示。","categories":[{"name":"特效","slug":"特效","permalink":"/categories/特效/"}],"tags":[{"name":"JS","slug":"JS","permalink":"/tags/JS/"}],"keywords":[{"name":"特效","slug":"特效","permalink":"/categories/特效/"}]},{"title":"8.29日报","slug":"2019-08-29-29ribao","date":"2019-08-28T16:00:00.000Z","updated":"2019-11-20T03:10:31.606Z","comments":true,"path":"2019/08/29/2019-08-29-29ribao/","link":"","permalink":"/2019/08/29/2019-08-29-29ribao/","excerpt":"","text":"学习进度 今天完成了计时器的考核，关于计时器与属性获取基本掌握90%，轮播图效果80%，后面开始看node,但是刚开始看进度10% 个人总结今天在做计时器效果与轮播图效果都是自己在网上寻找的教程与例子，当自己努力做出来的成果成果的时候是很开心的，很有动力。","categories":[{"name":"心得","slug":"心得","permalink":"/categories/心得/"}],"tags":[{"name":"心得","slug":"心得","permalink":"/tags/心得/"}],"keywords":[{"name":"心得","slug":"心得","permalink":"/categories/心得/"}]},{"title":"8.28技术文档","slug":"2019-08-28-28jishu","date":"2019-08-27T16:00:00.000Z","updated":"2019-11-20T03:10:47.046Z","comments":true,"path":"2019/08/28/2019-08-28-28jishu/","link":"","permalink":"/2019/08/28/2019-08-28-28jishu/","excerpt":"","text":"JS常用知识 直接写入html输出流： document.write(&quot;&lt;h1&gt;这是一个标题&lt;/h1&gt;&quot;); 改变html内容： &lt;p id=&quot;demo&quot;&gt;111&lt;/p&gt; &lt;script&gt; function myFunction() //定义一个类 { var x=document.getElementById(&quot;demo&quot;); //找到元素 x.innerHTML = &quot;hello&quot;; //改变内容 x.style.color = &quot;#ff0000&quot;; } &lt;/script&gt; &lt;button onclick=&quot;myFunction()&quot;&gt;点我&lt;/button&gt; 显示数据 alert() 弹出警告框 document.write() 将内容写到HTML文档中 innerHTML= &quot;写入到HTML元素&quot; console.log() 写入到浏览器的控制台 let 声明的变量是局部变量const 用来声明常量","categories":[{"name":"JS","slug":"JS","permalink":"/categories/JS/"}],"tags":[{"name":"JS","slug":"JS","permalink":"/tags/JS/"}],"keywords":[{"name":"JS","slug":"JS","permalink":"/categories/JS/"}]},{"title":"8.28日报","slug":"2019-08-28-28ribao","date":"2019-08-27T16:00:00.000Z","updated":"2019-11-20T03:10:52.653Z","comments":true,"path":"2019/08/28/2019-08-28-28ribao/","link":"","permalink":"/2019/08/28/2019-08-28-28ribao/","excerpt":"","text":"学习进度 今天下午学习了JS基础，学习了 定时器和选择对象并修改内容，还看了一些基础语法。 个人总结今天学习的新任务是JS ，原来学过一些php也有一些基础学得还不算慢，总体来说今天的学习效率还可以。","categories":[{"name":"心得","slug":"心得","permalink":"/categories/心得/"}],"tags":[{"name":"心得","slug":"心得","permalink":"/tags/心得/"}],"keywords":[{"name":"心得","slug":"心得","permalink":"/categories/心得/"}]},{"title":"8.27技术文档","slug":"2019-08-27-27jishu","date":"2019-08-26T16:00:00.000Z","updated":"2019-11-20T03:10:44.410Z","comments":true,"path":"2019/08/27/2019-08-27-27jishu/","link":"","permalink":"/2019/08/27/2019-08-27-27jishu/","excerpt":"","text":"TCP/IP协议 TCP/IP协议简介: TCP/IP传输协议，即传输控制/网络协议，也叫作网络通讯协议。它是在网络的使用中的最基本的通信协议。TCP/IP传输协议对互联网中各部分进行通信的标准和方法进行了规定。并且，TCP/IP传输协议是保证网络数据信息及时、完整传输的两个重要的协议。TCP/IP传输协议是严格来说是一个四层的体系结构，应用层、传输层、网络层和数据链路层都包含其中。 TCP/IP协议的组成: TCP/IP协议在一定程度上参考了OSI的体系结构。OSI模型共有七层，从下到上分别是物理层、数据链路层、网络层、运输层、会话层、表示层和应用层。","categories":[{"name":"TCP","slug":"TCP","permalink":"/categories/TCP/"}],"tags":[{"name":"TCP","slug":"TCP","permalink":"/tags/TCP/"}],"keywords":[{"name":"TCP","slug":"TCP","permalink":"/categories/TCP/"}]},{"title":"8.27日报","slug":"2019-08-27-27ribao","date":"2019-08-26T16:00:00.000Z","updated":"2019-11-20T03:10:37.623Z","comments":true,"path":"2019/08/27/2019-08-27-27ribao/","link":"","permalink":"/2019/08/27/2019-08-27-27ribao/","excerpt":"","text":"学习进度 linux命令已通过考核，但是还有一些没有太熟练，学习进度95%，下午绘制了聊天室的流程图和思维导图基本绘制完成进度90%。 个人总结 今天的不足与感悟 今天的不足已经给了半天时间看文档，考试linux命令时候还勾抹几次，命令定义不明确，意思相近的有很多没有明确区分。 今天的感悟背东西时候要专注，有效率不能左看一眼又看一眼，这个看会了再看下一个","categories":[{"name":"心得","slug":"心得","permalink":"/categories/心得/"}],"tags":[{"name":"心得","slug":"心得","permalink":"/tags/心得/"}],"keywords":[{"name":"心得","slug":"心得","permalink":"/categories/心得/"}]},{"title":"8.26技术文档","slug":"2019-08-26-26jishu","date":"2019-08-25T16:00:00.000Z","updated":"2019-11-20T03:10:56.520Z","comments":true,"path":"2019/08/26/2019-08-26-26jishu/","link":"","permalink":"/2019/08/26/2019-08-26-26jishu/","excerpt":"","text":"linux常用命令整合版关机 (系统的关机、重启以及登出 ):shutdown -h now 关闭系统init 0 关闭系统telinit 0 关闭系统shutdown -h hours:minutes &amp; 按预定时间关闭系统shutdown -c 取消按预定时间关闭系统shutdown -r now 重启reboot 重启logout 注销 文件和目录:cd /home 进入 ‘/ home’ 目录’cd .. 返回上一级目录cd ../.. 返回上两级目录cd 进入个人的主目录cd ~user1 进入个人的主目录cd - 返回上次所在的目录pwd 显示工作路径ls 查看目录中的文件ls -F 查看目录中的文件ls -l 显示文件和目录的详细资料ls -a 显示隐藏文件ls [0-9] 显示包含数字的文件名和目录名tree 显示文件和目录由根目录开始的树形结构lstree 显示文件和目录由根目录开始的树形结构mkdir dir1 创建一个叫做 ‘dir1’ 的目录’mkdir dir1 dir2 同时创建两个目录mkdir -p /tmp/dir1/dir2 创建一个目录树rm -f file1 删除一个叫做 ‘file1’ 的文件’rmdir dir1 删除一个叫做 ‘dir1’ 的目录’rm -rf dir1 删除一个叫做 ‘dir1’ 的目录并同时删除其内容rm -rf dir1 dir2 同时删除两个目录及它们的内容mv dir1 new_dir 重命名/移动 一个目录cp file1 file2 复制一个文件cp dir/* . 复制一个目录下的所有文件到当前工作目录cp -a /tmp/dir1 . 复制一个目录到当前工作目录cp -a dir1 dir2 复制一个目录ln -s file1 lnk1 创建一个指向文件或目录的软链接ln file1 lnk1 创建一个指向文件或目录的物理链接touch -t 0712250000 file1 修改一个文件或目录的时间戳 - (YYMMDDhhmm)file file1 outputs the mime type of the file as texticonv -l 列出已知的编码 文件搜索 :find / -name file1 从 ‘/‘ 开始进入根文件系统搜索文件和目录find / -user user1 搜索属于用户 ‘user1’ 的文件和目录 find /home/user1 -name *.bin 在目录 ‘/ home/user1’ 中搜索带有’.bin’ 结尾的文件 find /usr/bin -type f -atime +100 搜索在过去100天内未被使用过的执行文件 find /usr/bin -type f -mtime -10 搜索在10天内被创建或者修改过的文件 find / -name *.rpm -exec chmod 755 ‘{}’ \\; 搜索以 ‘.rpm’ 结尾的文件并定义其权限 find / -xdev -name *.rpm 搜索以 ‘.rpm’ 结尾的文件，忽略光驱、捷盘等可移动设备 locate *.ps 寻找以 ‘.ps’ 结尾的文件 - 先运行 ‘updatedb’ 命令whereis halt 显示一个二进制文件、源码或man的位置 which halt 显示一个二进制文件或可执行文件的完整路径 备份:dump [选项] 备份后文件名 原文件或目录选项：-0~9 九个备份级别-f文件名： 指定备份后的文件名-u： 备份成功后，把备份时间记录在/etc/dumpdates文件-v：显备份过程中更多的输出信息-j ：把文件压缩为.bz2格式-W：显示允许被dump的分区备份登等级及备份时间例： dump -0uj -f /root/boot.bak.bz2 /boot备份命令，先执行一次完全备份，并压缩和更新备份时间:cat /etc/dumpdates查看备份时间文件 :cp install.log /boot/复制日志文件到boot分区 :dump -1uj -f /root/boot,bak1.bz2 /boot/增量备份/boot分区，并压缩:dump -W查询分区的备份时间及备份级别 :备份文件或目录，只能用0级别进行完全备份，并且不支持增量备份：dump -0j -f /root/etc.dump.bz2 /etc/ 恢复备份:restore [模式选项] [选项]有四种模式不能混用。-C：比较备份数据和实际数据的变化-i：进入交互模式，手工选择需要恢复的文件-t：查看模式，用于查看文件中拥有哪些数据-r：还原模式，用于数据还原选项：-f：指定备份文件的文件名 磁盘空间:df -h 显示已经挂载的分区列表 ls -lSr |more 以尺寸大小排列文件和目录 du -sh dir1 估算目录 ‘dir1’ 已经使用的磁盘空间’ du -sk * | sort -rn 以容量大小为依据依次显示文件和目录的大小 rpm -q -a –qf ‘%10{SIZE}t%{NAME}n’ | sort -k1,1n 以大小为依据依次显示已安装的rpm包所使用的空间 (fedora, redhat类系统) dpkg-query -W -f=’${Installed-Size;10}t${Package}n’ |sort -k1,1n 以大小为依据显示已安装的deb包所使用的空间 (ubuntu, debian类系统) 用户和群组groupadd group_name 创建一个新用户组 groupdel group_name 删除一个用户组 groupmod -n new_group_name old_group_name 重命名一个用户组 useradd -c “Name Surname “ -g admin -d /home/user1 -s / bin/bash user1 创建一个属于 “admin” 用户组的用户 useradd user1 创建一个新用户 userdel -r user1 删除一个用户 ( ‘-r’ 排除主目录) usermod -c “User FTP” -g system -d /ftp/user1 -s /bin/nologin user1 修改用户属性 passwd 修改口令 passwd user1 修改一个用户的口令 (只允许root执行) chage -E 2005-12-31 user1 设置用户口令的失效期限 pwck 检查 ‘/etc/passwd’ 的文件格式和语法修正以及存在的用户 grpck 检查 ‘/etc/passwd’ 的文件格式和语法修正以及存在的群组 newgrp group_name 登陆进一个新的群组以改变新创建文件的预设群组 文件的权限 - 使用 “+” 设置权限，使用 “-“ 用于取消 ls -lh 显示权限 ls /tmp | pr -T5 -W$COLUMNS 将终端划分成5栏显示 chmod ugo+rwx directory1 设置目录的所有人(u)、群组(g)以及其他人(o)以读（r ）、写(w)和执行(x)的权限 chmod go-rwx directory1 删除群组(g)与其他人(o)对目录的读写执行权限 chown user1 file1 改变一个文件的所有人属性 chown -R user1 directory1 改变一个目录的所有人属性并同时改变改目录下所有文件的属性 chgrp group1 file1 改变文件的群组 chown user1:group1 file1 改变一个文件的所有人和群组属性 find / -perm -u+s 罗列一个系统中所有使用了SUID控制的文件 chmod u+s /bin/file1 设置一个二进制文件的 SUID 位 - 运行该文件的用户也被赋予和所有者同样的权限 chmod u-s /bin/file1 禁用一个二进制文件的 SUID位 chmod g+s /home/public 设置一个目录的SGID 位 - 类似SUID ，不过这是针对目录的 chmod g-s /home/public 禁用一个目录的 SGID 位 chmod o+t /home/public 设置一个文件的 STIKY 位 - 只允许合法所有人删除文件 chmod o-t /home/public 禁用一个目录的 STIKY 位 文件的特殊属性 - 使用 “+” 设置权限，使用 “-“ 用于取消 chattr +a file1 只允许以追加方式读写文件 chattr +c file1 允许这个文件能被内核自动压缩/解压 chattr +d file1 在进行文件系统备份时，dump程序将忽略这个文件 chattr +i file1 设置成不可变的文件，不能被删除、修改、重命名或者链接 chattr +s file1 允许一个文件被安全地删除 chattr +S file1 一旦应用程序对这个文件执行了写操作，使系统立刻把修改的结果写到磁盘 chattr +u file1 若文件被删除，系统会允许你在以后恢复这个被删除的文件 lsattr 显示特殊的属性 打包和压缩文件: file 文件名 ：查文件类型（可看是用哪一种方式压缩的） tar -zxvf a.tar.gz -C ./test ：解压tar.gz到当前目录下的test目录 tar -zcvf /opt/c.tar.gz ./a/ ：压缩tar.gz（把当前目录下的a目录及目录下所有文件压缩为 /opt/目录下的c.tar.gz，这样tar -zxvf c.tar.gz解压出来带有目录a） tar -jxvf a.tar.bz2 ：解压tar.bz2（到当前目录） tar -jcvf c.tar.bz2 ./a/ ：压缩tar.bz2（把当前目录下的a目录及目录下所有文件压缩到当前目录下为c.tar.gz2） unzip a.zip ：解压zip（到当前目录） unzip -o mdmtest.war -d /opt/mdm ：推荐使用unzip解压war包（-o覆盖原有文件，-d指定文件解压后存储的目录） zip -r c.zip ./a/ :压缩zip(把当前目录下的a目录及目录下所有文件压缩到当前目录下为c.zip bzip2 -k file1 ： 压缩一个 ‘file1’ 的文件（-k表示保留源文件）（bzip2格式，比gzip好） bzip2 -d -k file1.bz2 ： 解压一个叫做 ‘file1.bz2’的文件 gzip file1 ： 压缩一个叫做 ‘file1’的文件（gzip格式）（不能保留源文件） gzip -9 file1 ： 最大程度压缩 gzip -d file1.gz ： 解压缩一个叫做 ‘file1’的文件 APT 软件工具 (Debian, Ubuntu 以及类似系统): apt-get install package_name 安装/更新一个 deb 包 apt-cdrom install package_name 从光盘安装/更新一个 deb 包 apt-get update 升级列表中的软件包 apt-get upgrade 升级所有已安装的软件 apt-get remove package_name 从系统删除一个deb包 apt-get check 确认依赖的软件仓库正确 apt-get clean 从下载的软件包中清理缓存 apt-cache search searched-package 返回包含所要搜索字符串的软件包名称 查看文件内容:cat file1 从第一个字节开始正向查看文件的内容 tac file1 从最后一行开始反向查看一个文件的内容 more file1 查看一个长文件的内容 less file1 类似于 ‘more’ 命令，但是它允许在文件中和正向操作一样的反向操作 head -2 file1 查看一个文件的前两行 tail -2 file1 查看一个文件的最后两行 tail -f /var/log/messages 实时查看被添加到一个文件中的内容 文本处理:cat file1 file2 … | command &lt;&gt; file1_in.txt_or_file1_out.txt general syntax for text manipulation using PIPE, STDIN and STDOUT cat file1 | command( sed, grep, awk, grep, etc…) &gt;result.txt 合并一个文件的详细说明文本，并将简介写入一个新文件中 cat file1 | command( sed, grep, awk, grep, etc…) &gt;&gt; result.txt 合并一个文件的详细说明文本，并将简介写入一个已有的文件中 grep Aug /var/log/messages 在文件 ‘/var/log/messages’中查找关键词”Aug” grep ^Aug /var/log/messages 在文件 ‘/var/log/messages’中查找以”Aug”开始的词汇 grep [0-9] /var/log/messages 选择 ‘/var/log/messages’ 文件中所有包含数字的行 grep Aug -R /var/log/* 在目录 ‘/var/log’ 及随后的目录中搜索字符串”Aug” sed ‘s/stringa1/stringa2/g’ example.txt 将example.txt文件中的 “string1” 替换成 “string2” sed ‘/^$/d’ example.txt 从example.txt文件中删除所有空白行 sed ‘/ *#/d; /^$/d’ example.txt 从example.txt文件中删除所有注释和空白行 echo ‘esempio’ | tr ‘[:lower:]’ ‘[:upper:]’ 合并上下单元格内容 sed -e ‘1d’ result.txt 从文件example.txt 中排除第一行 sed -n ‘/stringa1/p’ 查看只包含词汇 “string1”的行 sed -e ‘s/ *$//‘ example.txt 删除每一行最后的空白字符 sed -e ‘s/stringa1//g’ example.txt 从文档中只删除词汇 “string1” 并保留剩余全部 sed -n ‘1,5p;5q’ example.txt 查看从第一行到第5行内容 sed -n ‘5p;5q’ example.txt 查看第5行 sed -e ‘s/00*/0/g’ example.txt 用单个零替换多个零 cat -n file1 标示文件的行数 cat example.txt | awk ‘NR%2==1’ 删除example.txt文件中的所有偶数行 echo a b c | awk ‘{print $1}’ 查看一行第一栏 echo a b c | awk ‘{print $1,$3}’ 查看一行的第一和第三栏 paste file1 file2 合并两个文件或两栏的内容 paste -d ‘+’ file1 file2 合并两个文件或两栏的内容，中间用”+”区分 sort file1 file2 排序两个文件的内容 sort file1 file2 | uniq 取出两个文件的并集(重复的行只保留一份) sort file1 file2 | uniq -u 删除交集，留下其他的行 sort file1 file2 | uniq -d 取出两个文件的交集(只留下同时存在于两个文件中的文件) comm -1 file1 file2 比较两个文件的内容只删除 ‘file1’ 所包含的内容 comm -2 file1 file2 比较两个文件的内容只删除 ‘file2’ 所包含的内容 comm -3 file1 file2 比较两个文件的内容只删除两个文件共有的部分 网络 - （以太网和WIFI无线）: sudo ifconfig 查看网卡信息 ifconfig eth0 显示一个以太网卡的配置 ifup eth0 启用一个 ‘eth0’ 网络设备 ifdown eth0 禁用一个 ‘eth0’ 网络设备 ifconfig eth0 192.168.1.1 netmask 255.255.255.0 控制IP地址 ifconfig eth0 promisc 设置 ‘eth0’ 成混杂模式以嗅探数据包 (sniffing) dhclient eth0 以dhcp模式启用 ‘eth0’","categories":[{"name":"命令","slug":"命令","permalink":"/categories/命令/"}],"tags":[{"name":"linux","slug":"linux","permalink":"/tags/linux/"}],"keywords":[{"name":"命令","slug":"命令","permalink":"/categories/命令/"}]},{"title":"8.26日报","slug":"2019-08-26-26ribao","date":"2019-08-25T16:00:00.000Z","updated":"2019-11-20T03:10:49.635Z","comments":true,"path":"2019/08/26/2019-08-26-26ribao/","link":"","permalink":"/2019/08/26/2019-08-26-26ribao/","excerpt":"","text":"学习进度 今天看了一天的linux命令但是侧重点不够明确，常用的命令也基本认识了，学习linux命令70%。 今天按照网上的材料整理了一些linux常用命令，分享了技术博客。 个人总结 今天的不足与感悟 今天的不足今天是我们组技术分享的时间，我讲的是html，虽然事先做好了ppt，但是上台还是有些放不开，不够灵活，只是死板地讲 今天的感悟上台演讲的事还是要多练习，还要多和大家沟通，才会一点点地会站在前面讲项目","categories":[{"name":"心得","slug":"心得","permalink":"/categories/心得/"}],"tags":[{"name":"心得","slug":"心得","permalink":"/tags/心得/"}],"keywords":[{"name":"心得","slug":"心得","permalink":"/categories/心得/"}]},{"title":"8.23日报","slug":"2019-08-23-23ribao","date":"2019-08-22T16:00:00.000Z","updated":"2019-11-20T03:09:19.484Z","comments":true,"path":"2019/08/23/2019-08-23-23ribao/","link":"","permalink":"/2019/08/23/2019-08-23-23ribao/","excerpt":"","text":"学习进度 今天把vim常用命令整理得差不多了，vim进度90%，今天开始看的linux命令，但是感觉看的很乱，进度40%。 今天按照网上的材料整理了一些linux常用命令，分享了技术博客。 个人总结 今天的不足与感悟 今天的不足今天心不够静，看到属性多了就乱了，不知道从哪开背起，后来慢慢的静下来从头看也看了好几个命令。 今天的感悟代码还是多敲，实践起来记忆得才快，代码敲得多了自然就会了。","categories":[{"name":"心得","slug":"心得","permalink":"/categories/心得/"}],"tags":[{"name":"心得","slug":"心得","permalink":"/tags/心得/"}],"keywords":[{"name":"心得","slug":"心得","permalink":"/categories/心得/"}]},{"title":"8.23技术文档","slug":"2019-08-23-23jishu","date":"2019-08-22T16:00:00.000Z","updated":"2019-11-20T03:10:03.685Z","comments":true,"path":"2019/08/23/2019-08-23-23jishu/","link":"","permalink":"/2019/08/23/2019-08-23-23jishu/","excerpt":"","text":"linux常用命令整理之一关机 (系统的关机、重启以及登出 ):shutdown -h now 关闭系统init 0 关闭系统telinit 0 关闭系统shutdown -h hours:minutes &amp; 按预定时间关闭系统shutdown -c 取消按预定时间关闭系统shutdown -r now 重启reboot 重启logout 注销 文件和目录:cd /home 进入 ‘/ home’ 目录’cd .. 返回上一级目录cd ../.. 返回上两级目录cd 进入个人的主目录cd ~user1 进入个人的主目录cd - 返回上次所在的目录pwd 显示工作路径ls 查看目录中的文件ls -F 查看目录中的文件ls -l 显示文件和目录的详细资料ls -a 显示隐藏文件ls [0-9] 显示包含数字的文件名和目录名tree 显示文件和目录由根目录开始的树形结构lstree 显示文件和目录由根目录开始的树形结构mkdir dir1 创建一个叫做 ‘dir1’ 的目录’mkdir dir1 dir2 同时创建两个目录mkdir -p /tmp/dir1/dir2 创建一个目录树rm -f file1 删除一个叫做 ‘file1’ 的文件’rmdir dir1 删除一个叫做 ‘dir1’ 的目录’rm -rf dir1 删除一个叫做 ‘dir1’ 的目录并同时删除其内容rm -rf dir1 dir2 同时删除两个目录及它们的内容mv dir1 new_dir 重命名/移动 一个目录cp file1 file2 复制一个文件cp dir/* . 复制一个目录下的所有文件到当前工作目录cp -a /tmp/dir1 . 复制一个目录到当前工作目录cp -a dir1 dir2 复制一个目录ln -s file1 lnk1 创建一个指向文件或目录的软链接ln file1 lnk1 创建一个指向文件或目录的物理链接touch -t 0712250000 file1 修改一个文件或目录的时间戳 - (YYMMDDhhmm)file file1 outputs the mime type of the file as texticonv -l 列出已知的编码 文件搜索 :find / -name file1 从 ‘/‘ 开始进入根文件系统搜索文件和目录find / -user user1 搜索属于用户 ‘user1’ 的文件和目录 find /home/user1 -name *.bin 在目录 ‘/ home/user1’ 中搜索带有’.bin’ 结尾的文件 find /usr/bin -type f -atime +100 搜索在过去100天内未被使用过的执行文件 find /usr/bin -type f -mtime -10 搜索在10天内被创建或者修改过的文件 find / -name *.rpm -exec chmod 755 ‘{}’ \\; 搜索以 ‘.rpm’ 结尾的文件并定义其权限 find / -xdev -name *.rpm 搜索以 ‘.rpm’ 结尾的文件，忽略光驱、捷盘等可移动设备 locate *.ps 寻找以 ‘.ps’ 结尾的文件 - 先运行 ‘updatedb’ 命令whereis halt 显示一个二进制文件、源码或man的位置 which halt 显示一个二进制文件或可执行文件的完整路径 备份:dump [选项] 备份后文件名 原文件或目录选项：-0~9 九个备份级别-f文件名： 指定备份后的文件名-u： 备份成功后，把备份时间记录在/etc/dumpdates文件-v：显备份过程中更多的输出信息-j ：把文件压缩为.bz2格式-W：显示允许被dump的分区备份登等级及备份时间例： dump -0uj -f /root/boot.bak.bz2 /boot备份命令，先执行一次完全备份，并压缩和更新备份时间:cat /etc/dumpdates查看备份时间文件 :cp install.log /boot/复制日志文件到boot分区 :dump -1uj -f /root/boot,bak1.bz2 /boot/增量备份/boot分区，并压缩:dump -W查询分区的备份时间及备份级别 :备份文件或目录，只能用0级别进行完全备份，并且不支持增量备份：dump -0j -f /root/etc.dump.bz2 /etc/ 恢复备份:restore [模式选项] [选项]有四种模式不能混用。-C：比较备份数据和实际数据的变化-i：进入交互模式，手工选择需要恢复的文件-t：查看模式，用于查看文件中拥有哪些数据-r：还原模式，用于数据还原选项：-f：指定备份文件的文件名","categories":[{"name":"命令","slug":"命令","permalink":"/categories/命令/"}],"tags":[{"name":"linux","slug":"linux","permalink":"/tags/linux/"}],"keywords":[{"name":"命令","slug":"命令","permalink":"/categories/命令/"}]},{"title":"8.22技术文档","slug":"2019-08-22-22jishu","date":"2019-08-21T16:00:00.000Z","updated":"2019-11-20T03:10:08.049Z","comments":true,"path":"2019/08/22/2019-08-22-22jishu/","link":"","permalink":"/2019/08/22/2019-08-22-22jishu/","excerpt":"","text":"vim常用命令整理 打开或新建一个文件，光标在第一行首 vim 文件名 恢复上次vim打开时崩溃的文件 vim -r 文件名 以只读方式放入vim编辑器中 vim -R 文件名 打开文件，光标在最后一行首部 vim + 文件名 在光标前插入输入的文本 i 在光标后插入输入的文本 a 在光标所在的行首插入文本 I（大写i） 在光标所在行的行尾插入文本 A 在光标所在行下面插入新一行，光标在行首 o 在光标所在行上面插入新一行，光标在行首 O 查找指定字符 /指定字符 查找以指定字符为行首的行 /^指定字符 查找以指定字符为行尾的行 /指定字符$ 从光标处向后查找字符串 ?abc按 n 向后查询下一个符合字符按 N 向前查询上一个符合字符 替换光标所在的字符 r 从光标所在位置开始替换字符，直到按esc结束 R 将当前所在行所有a1换成a2 :s/a1/a2/g 将文件中n1到n2行的所有a1换成a2 :n1,n2s/a1/a2/g 将文件中所有a1换成a2 :g/a1/a2/g 删除光标所在位置的字符 x 删除光标位置到行尾内容 D 删除光标所在行 dd 删除包括当前行的n行文本 ndd 删除光标所在行直到文件末尾所有内容 dG 被删除的文件并不是真正删除，而是放进了剪切板中 将剪切板内容复制到光标后 p(小写) 将剪贴板中的内容复制到光标前 P(大写) ctrl + c 块选择 y 复制选定的字符 将光标所在行复制到剪切板，前面加数字n，可以复制多行 yy 将光标位置单词复制到剪切板 yw 保存并退出 :wq 不保存就退出 :q 保存 :w 另存为 :w 文件名 命令后面加! 增加强制性 保存文本并退出v，更通用的一个vim命令 x! 直接退出vim编辑器 ZZ 与下一行数据合并 J 复原前一个动作 u 重复前一个动作 .","categories":[{"name":"命令","slug":"命令","permalink":"/categories/命令/"}],"tags":[{"name":"vim","slug":"vim","permalink":"/tags/vim/"}],"keywords":[{"name":"命令","slug":"命令","permalink":"/categories/命令/"}]},{"title":"8.22日报","slug":"2019-08-22-22ribao","date":"2019-08-21T16:00:00.000Z","updated":"2019-11-20T03:09:19.484Z","comments":true,"path":"2019/08/22/2019-08-22-22ribao/","link":"","permalink":"/2019/08/22/2019-08-22-22ribao/","excerpt":"","text":"学习进度 git已经基本完成，今天学习了如何使用vim和vim的常用命令，已经大致地过了一遍，vim学习进度大约70%。 并且今天还按照网上的材料整理了一下常用命令，分享了技术博客。 个人总结 今天的不足与感悟 今天的不足vim的常用语法挺简单的，但是我看了两节课没去怎么实践去敲，感觉边敲边记会更快一些。 今天的感悟代码还是多敲，实践起来记忆得才快，代码敲得多了自然就会了。","categories":[{"name":"命令","slug":"命令","permalink":"/categories/命令/"}],"tags":[{"name":"vim","slug":"vim","permalink":"/tags/vim/"}],"keywords":[{"name":"命令","slug":"命令","permalink":"/categories/命令/"}]},{"title":"8.21日报","slug":"2019-08-21-21ribao","date":"2019-08-20T16:00:00.000Z","updated":"2019-11-20T03:09:19.539Z","comments":true,"path":"2019/08/21/2019-08-21-21ribao/","link":"","permalink":"/2019/08/21/2019-08-21-21ribao/","excerpt":"","text":"学习进度 今天勉强通过了老师的测试 git完成度在90%，并且今天整理了git常用命令。 个人总结 今天的不足与感悟 今天的不足考试的时候在写 git commit时候忘记先使用 git status 看一看，平时自己记笔记的时候还特意记过这一点，考试的时候还忘记了，这种马虎要长记性。还有今天学习效率问题，虽然勉强过了老师的考试，但是今天在学习时间的学习效率自我感觉很差 看的git官方后面的概念文档很蒙，感觉今天往后看没什么太大进度，只有一点大致了解。 今天的感悟在一个知识点搞不明白时候一定要自己亲手自己实验几遍，实验几遍不会再去问其他同学，其他同学有问题也要勤看，尽管自己也不能会，等他解决问题之后再去看看他怎么解决的，以后注意同样问题。总之个人的发展离不开团体。","categories":[{"name":"命令","slug":"命令","permalink":"/categories/命令/"}],"tags":[{"name":"git","slug":"git","permalink":"/tags/git/"}],"keywords":[{"name":"命令","slug":"命令","permalink":"/categories/命令/"}]},{"title":"8.21技术文档","slug":"2019-08-21-21jishu","date":"2019-08-20T16:00:00.000Z","updated":"2019-11-20T03:08:00.904Z","comments":true,"path":"2019/08/21/2019-08-21-21jishu/","link":"","permalink":"/2019/08/21/2019-08-21-21jishu/","excerpt":"","text":"git常用命令整理 初始化代码库 git init 文件名 克隆远程仓库 git clone 远程仓库地址 添加文件到暂存区 git add 文件 (对文件进行跟踪，再用一次就是将跟踪的文件放到暂存区) 添加当前所有文件到暂存区 git add.或者git add –all 删除文件,并将这次删除放入暂存区 git rm 停止追踪指定文件，但文件会保留在工作区 git rm –cached 改名文件，并将这个改名放入暂存区 git mv 老文件名 新文件名 提交暂存区到仓库区 git commit -m [备注] 提交暂存区的指定文件到仓库区 git commit 文件 -m [备注] （加-a直接提交到仓库区） 重新提交一次commit，修改提交的备注 git commit –amend -m [备注] 重新提交一次commit，并指定文件的新变化 git commit –amend 文件 显示有变更的文件 git status 每次commit的时候建议先git status 看一下 显示当前分支的提交历史 git log 显示当前分支的操作记录 （包括回退的操作） git reflog 根据关键词搜索历史 git log -S 关键词 把暂存区的文件 恢复到工作区 git checkout 文件名 恢复暂存区所有文件到工作区 git checkout . 回退暂存区的指定文件,工作区不变 git reset 文件 回退暂存区与工作区 git reset –hard 回退到指定历史： git reset 历史 回退到指定历史操作，同时重置暂存区和工作区 git reset –hard 历史 新建一个历史，用来撤销指定的历史并应用到当前分支 git revert 历史 显示暂存区和工作区差异 git diff 显示暂存区和上一次提交的差异 git diff –cached 文件 列出所有本地分支 git branch 列出所有远程分支 git branch -r 列出所有分支 git branch -a 新建分支 git branch 新分支名称 新建分支并且切换到该分支 git checkout -b 新分支名 新建分支，与制定远程分支建立追踪关系 git branch –track 分支名 远程分支名 切换分支 git checkout 分支名 在现有分支和制定远程分支之间建立追踪关系 git branch –set-upstream 分支名 远程分支名 合并指定分支到当前分支 git merge 分支名 删除分支 git branch -d 分支名 删除远程分支 git push origin –delete 远程分支名git branch -dr 远程库/分支名 下载远程仓库的所有变动 git fetch 远程仓库 显示所有远程仓库 git remote -v 查看某个远程库的信息 git remote show 远程库 增加一个远程库，并命名 git remote add 起的名 远程库的地址 取回远程库的变化，并与本地分支自动合并 git pull 远程库 分支(如果提示无关历史无法合并，可以使用：–allow-unrelated-histories) 上传本地指定分支到远程库 git push 远程库 分支 强行推送分支到远程仓库 git push 远程库 –force 推送所有分支到远程仓库 git pus 远程库 –all 隐藏未提交的修改，用于后续恢复到当前工作目录： git stash 将隐藏的修改应用到当前分支对应目录上 git stash pop 列出所有标签 git tag 在当前操作历史上添加标签 git tag 标签名 新建一个标签在指定历史 git tag 标签名 历史 删除本地标签 git tag -d 标签名 删除远程标签 git push origin :refs/tags/标签名 查看标签信息 git show 标签名 提交指定标签 git push 远程库 标签 提交所有标签 git push 远程库 –tags 新建一个分支 指向某个标签 git checkout -b 分支名 标签 最后放上一张网上找到的git常用命令表：","categories":[{"name":"命令","slug":"命令","permalink":"/categories/命令/"}],"tags":[{"name":"git","slug":"git","permalink":"/tags/git/"}],"keywords":[{"name":"命令","slug":"命令","permalink":"/categories/命令/"}]},{"title":"8.20日报","slug":"2019-08-20-20ribao","date":"2019-08-19T16:00:00.000Z","updated":"2019-11-20T03:09:19.564Z","comments":true,"path":"2019/08/20/2019-08-20-20ribao/","link":"","permalink":"/2019/08/20/2019-08-20-20ribao/","excerpt":"","text":"学习进度 今天对git的一些基础命令熟练度80%，又继续往后看官方的文档，关于git的实际工作流程，看了举的几个例子，也大致了解了工作流程。 git团队工作大致流程例子： 有一个远程仓库 第一个人，克隆了仓库，作了些更新，在本地提交。 第二个开发者，一样这么做：克隆仓库，提交更新。 现在，第二个人将她的工作推送到服务器上，第一个人 也尝试推送自己的工作上去。 第一个人的推送操作被驳回，因为 第二个人已经推送了新的数据上去。 这时候第一个人需要把远程库的更新拉下来同步才能完成推送。 个人总结 今天的不足与感悟 今天的不足今天看git官方文档的概念文档了，但是感觉自己看得很笼统，学习效率很低，导致越看越有点蒙。 今天的感悟今天我的U盘出现了没办法打开的情况，在ubuntu的系统上也不是很容易下u盘修复的工具，自己弄了1个多小时无果后寻求了老师的帮助，老师几下就解决了问题。这让我深深地体会到了经验的重要，一定要多去实践，经验才是知识进步的堆积。","categories":[{"name":"git进度","slug":"git进度","permalink":"/categories/git进度/"}],"tags":[{"name":"git命令","slug":"git命令","permalink":"/tags/git命令/"}],"keywords":[{"name":"git进度","slug":"git进度","permalink":"/categories/git进度/"}]},{"title":"8.19日报","slug":"2019-08-19-19ribao","date":"2019-08-18T16:00:00.000Z","updated":"2019-11-20T03:09:19.484Z","comments":true,"path":"2019/08/19/2019-08-19-19ribao/","link":"","permalink":"/2019/08/19/2019-08-19-19ribao/","excerpt":"","text":"学习进度 今天又进一步地熟练了git的命令，以及深入地了解到了git分支的流程和使用方法 分支的主要作用就是多个人可以同时利用分支修改自己要实现的的功能模块，然后再上传到远程仓库，达到多人同时作业，大大提高了开发效率。 主要知识点： 创建分支： git branch 查看分支： git branch 切换分支： git checkout 创建分支并转到： git checkout -b 删除分支： git branch -d 合并当前分支与指定分支： git merge 个人总结 今天的不足与感悟 今天的不足今天轮到我上台讲知识点了，但是没有去准备太多的知识点去讲，基础知识也不够扎实，出现了很多预料之外的错误，准备不够充分。 今天的感悟上台之后逻辑不是很清楚，先讲什么后讲什么，让我理解到了程序员不光要会敲代码也要会表达。","categories":[{"name":"命令","slug":"命令","permalink":"/categories/命令/"}],"tags":[{"name":"git","slug":"git","permalink":"/tags/git/"}],"keywords":[{"name":"命令","slug":"命令","permalink":"/categories/命令/"}]},{"title":"8.17日报","slug":"2019-08-17-17ribao","date":"2019-08-16T16:00:00.000Z","updated":"2019-11-20T03:09:19.539Z","comments":true,"path":"2019/08/17/2019-08-17-17ribao/","link":"","permalink":"/2019/08/17/2019-08-17-17ribao/","excerpt":"","text":"学习进度 今天我深入了解并学习了git 今天下来我对于git的理解：经过阅读了官方文档和前辈们整理的博客，我了解到了git对于项目开发的重要性，每个人可以根据不同的需求创建分支，修改自己的功能模块，然后再重新合并到服务器上的代码 今天的学习成果： 今天已经把博客基本做出一个可以交付的初成品了，下午开始学习git语法，现在已经了解了git的一些基础语法，也大概了解了git的工作原理与操作。 今日不足： 电脑的有线网不知为何无法连接，在寻找各种方法解决无果后甚至重做系统，导致了浪费了过多的学习时间。git的学习效率也不够高，感觉看得很乱，看文档没有条理性，静不下心来看文档。 个人总结 今天的不足与感悟 今天的不足今天将自己做的博客上交检查了，在一个之前完成的功能出现了问题，自己没有在交项目时候提前看一下，这件事我会记住的。 今天的感悟交项目的时候一定要将自己的所有功能都检查一边，不要因为之前解决了就不再看那个功能了，否则也许改别的时候把功能改了，否则自己麻烦别人也麻烦。","categories":[{"name":"命令","slug":"命令","permalink":"/categories/命令/"}],"tags":[{"name":"git","slug":"git","permalink":"/tags/git/"}],"keywords":[{"name":"命令","slug":"命令","permalink":"/categories/命令/"}]},{"title":"8.16日报","slug":"2019-08-16-16ribao","date":"2019-08-15T16:00:00.000Z","updated":"2019-11-19T14:15:17.640Z","comments":true,"path":"2019/08/16/2019-08-16-16ribao/","link":"","permalink":"/2019/08/16/2019-08-16-16ribao/","excerpt":"","text":"学习进度 今天主要学习了ubuntu系统的安装与git的使用 关于ubuntu系统的安装在网上下载了u盘启动盘制作，将自己的u盘做成了启动盘，经过四五次的反复安装与思考终于安装成功了。 今日不足： 由于第一次接触ubuntu系统，准备又不够充分，导致了安装了四五次才能够成功。 关于git的使用 今天布置的任务是成功在github上发布自己的博客，我从最开始的不知道git是什么，在网上一步步地查询，逐渐深入了解到了git与github，最终成功创建了github并构建了存储库。 今日不足： 在使用jekyll模板时候修改模板时没有参考官方文档，自己乱打文档去寻找，大大降低了进度。 个人总结 今天的不足与感悟 今天的不足短短的一天自学模式，我就已经发现了自己的很多问题：不喜欢查看官方文档，不喜欢多问问做出来的同学喜欢自己抠问题。 今天的感悟永远都有学的比较好的和学的一般的，既然自己学的不够好就要付出更加多的努力。","categories":[{"name":"系统与命令","slug":"系统与命令","permalink":"/categories/系统与命令/"}],"tags":[{"name":"ubuntu","slug":"ubuntu","permalink":"/tags/ubuntu/"},{"name":"git","slug":"git","permalink":"/tags/git/"}],"keywords":[{"name":"系统与命令","slug":"系统与命令","permalink":"/categories/系统与命令/"}]}]}